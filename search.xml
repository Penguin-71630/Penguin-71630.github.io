<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>普物筆記：量子力學</title>
      <link href="/2023/02/23/physics/"/>
      <url>/2023/02/23/physics/</url>
      
        <content type="html"><![CDATA[<style>.lv1 {    color: red;    font-weight: bold;}.lv2 {    color: #e89a13;    font-weight: bold;}.lv3 {    color: #bfad0b;    font-weight: bold;}.lv4 {    color: #27cf40;    font-weight: bold;}</style><span id="more"></span><!-- ------------------------------------------------------------- --><blockquote><p>Course: Physics (II)<br>Instructor: 李威儀<br>Time: 2023 Spring</p></blockquote><h1>Ch.17 The Beginning of Quantum Story</h1><p>近代物理包含相對論與量子力學的探討、研究。自 1900 年開始，物理學家大多認為物理已經發展完備，僅剩一些問題尚未解決，然而這些問題不僅無法用古典物理完整詮釋，更導致了全新的觀念、知識架構的誕生：</p><ul><li>Blackbody Radiation</li><li>Photoelectric Effect</li><li>X-ray Production</li><li>Compton Effect</li></ul><h2 id="Blackbody-Radiation-黑體輻射">Blackbody Radiation (黑體輻射)</h2><p>所有溫度大於 0K 的物體皆會放出輻射。一個物體如果是良好的電磁波吸收體，那它也是良好的放射體，反之亦然。</p><p>黑體定義為電磁波的完全吸收體和完全放射體，為理想模型，現實中尚未存在。</p><p>恆星非常近似黑體。實驗室模擬黑體的方法很簡單，製造一個有小洞的空腔。</p><p>黑體放射出的電磁波有很多種，而各波長的電磁波與其輻射率分布圖如下：</p><img src="/2023/02/23/physics/blackbody.png" width="40%"><p>從圖可以發現不同溫度下的黑體會有不同的曲線。古典物理無法給出一個可以擬合這些曲線的模型，要不就是長波長無法吻合，要不就是短波長無法吻合 (紫外災變)。</p><p>1900 年普朗克提出的能量量子化模型，成功解決了這個問題，也是量子力學的開山始祖。</p><h3 id="普朗克的模型">普朗克的模型</h3><div class="note default">            <ol><li>黑體可以想像成一大堆原子大小的震盪體，每個震盪體皆做簡諧運動，同時吸收、放射電磁波。</li><li>震盪體的能量不為連續，為特定最小值的整數倍，這些震盪體的放射電磁波的能量亦同。</li></ol>          </div><p>震盪體的能量公式：</p><p>$$<br>E = nh\nu \qquad n \in \mathbb{N}, h = 6.6 \times 10^{-34} \ \text{(普朗克常數)}, \nu = \text{震盪頻率}<br>$$</p><p>定義 $I(\nu, T)$ 為黑體溫度為 $T$ 時，頻率 $\nu$ 的電磁波輻射率，則有 Planck Law：</p><p>$$<br>I(\nu, T) = \frac{2h\nu ^3}{c^2} \frac{1}{e^\frac{h\nu}{kT}-1}<br>$$</p><p>這條公式不會考，我寫爽的。把所有頻率的電磁波輻射率套上面那條公式再積分起來會得到只和溫度相關的公式 (Stefan-Boltzmann Law)：</p><p>$$<br>I_T = \sigma T^4 \qquad \sigma = 5.67 \times 10^{-8}<br>$$</p><p>$I_T$ 是黑體單位面積的輻射功率，單位 $W/m^2$，和溫度四次方成正比。</p><p>普朗克常數是為了擬合曲線才湊出來的，非常小，這就是日常生活中看不到能量量子化現象的原因。</p><div class="note info">            <p>10kg 彈力係數 1000 震幅 0.1m 的彈簧總力學能和頻率如下：</p><p>$$<br>E = \frac{1}{2} kA^2 = 5J<br>$$<br>$$<br>f = \frac{1}{2\pi} \sqrt{\frac{k}{m}} \approx 1.59 Hz<br>$$</p><p>一個能量量子 $\triangle E = hf \approx 10^{-33}J$，極微小，因此會誤以為能量是連續的。</p>          </div><p>另外補充，黑體輻射曲線圖中，強度最高的電磁波頻率 $\nu_{max} \propto T$，波長 $\lambda_{max} \propto \frac{1}{T}$</p><h2 id="Photoelectric-Effect-光電效應">Photoelectric Effect (光電效應)</h2><p>光電效應在量子力學出現之前就已經被赫茲發現，只是當時尚無法解釋，一直到 1905 年由愛因斯坦提出光子的概念才完美詮釋。</p><div class="note danger">            <p>古典物理的錯誤觀點：</p><ol><li>光是電磁波，能量和電場震幅大小有關 $(I \propto \epsilon^2)$，但其實是和光波頻率有關。</li><li>電子吸收能量需要時間，但如果按照古典物理模型計算，得到的結果是約需數秒至數天才能產生反應，但光電效應是立即發生。</li></ol>          </div><div class="note success">            <p>光子理論：假設光能量為不連續，一個單位的能量可以假想為光子。光是波動這件事毫無疑問 (楊氏雙狹縫干涉)，但在這裡又必須把光想像成粒子，此即光的波粒二象性。</p>          </div><p>光電效應的裝置如下：由一單頻光 $\nu$ 射入真空管內的金屬板陰極，陰極會射出電子至陽極，射出電子稱為光電子。</p><img src="/2023/02/23/physics/photoelectric.png" width="40%"><p>$\bar{V}$ 為減速電壓 (retarding voltage)，當電壓大到一定程度時，電子會停止移動，電流降為 0，此時電壓稱為遏止電壓 $\bar{V_0}$ (stopping voltage)。</p><p>電子克服價帶而發射出去所需要的能量為功函數 (work function)，令其為 $\Phi$。</p><p>利用遏止電壓可以測量電子的最大動能 $E_k$、功函數。</p><p>光子能量 $E_p = h\nu$，光電效應的方程式：</p><p>$$<br>E_p = E_k + \Phi<br>$$<br>$$<br>h\nu = e\bar{V_0} + \Phi<br>$$</p><p>光強度正比於光子密度，可以想成有多少顆光子。</p><p>得到以下結論：</p><ol><li>$E_k = h\nu - \Phi$</li><li>$\bar{V_0} = \frac{h}{e}\nu - \frac{\Phi}{e}$</li></ol><p>定義遏止頻率 $\nu_0$ 為克服功函數至少需要的光波頻率，$\Phi = h\nu_0$。</p><h3 id="光子動量">光子動量</h3><p>狹義相對論方程式：$E = mc^2$，$m$ 為相對質量，適用於光子 (靜止質量為 0)。</p><p>光子能量 $h\nu$，動量 $p = mc$，由相對論方程式：</p><p>$$<br>h\nu = pc \Rightarrow p = \frac{h\nu}{c} = \frac{h}{\lambda}<br>$$</p><h2 id="X-ray-Production">X-ray Production</h2><p>X 光的產生有點像是光電效應的逆反應，由電子產生電磁波。</p><p>Crookes Tube:</p><img src="/2023/02/23/physics/xray.png" width="90%"><p>電壓夠大時，真空管內的熱金屬絲會發射電子，撞擊金屬靶後會產生 X-ray。</p><p>X-ray 光譜可以分成兩部分：</p><ol><li>Characteristic X-ray: 電子撞飛金屬原子內的電子，剩下的空洞由高能階的電子躍遷來填補。特徵 X 光光譜和金屬原子有關，因為不同原子會有不同的能階組合。特徵 X 光和電壓大小無關。</li><li>Braking Radiation (Bremsstrahlung) Spectrum: 電子經過原子核附近，受庫侖力影響而減速，損失的能量以 X 光的形式向外輻射。</li></ol><p>輻射出來的 X 光有最大頻率 $\nu_{max}$，是一個有限值，和電壓 $\bar{V}$ 成正比。</p><div class="note danger">            <p>古典物理的錯誤觀點：按照圓周運動的模型來解釋 X 光的產生，但問題在於，如果電子逃離不了原子核的吸引，最終會繞核旋轉、越貼越近直至墜入原子核，過程中電子震盪頻率越來越快，因此 $\nu_{max}$ 應該會 $\rightarrow \infty$。</p>          </div><div class="note success">            <p>量子理論：假設電子原有動能 $E_k = e\bar{V}$，損失動能 $\triangle E_k$，若輻射出 $n$ 個光子，則有：</p><p>$$<br>\triangle E_k = \sum_{i=1}^{n} h\nu_i<br>$$</p><p>考慮最大損失的動能 $\triangle E_k = E_k$ 全部轉移至同一個光子，則可以計算 X 光最大頻率：</p><p>$$<br>E_k = e\bar{V} = h\nu_{max} \Rightarrow \nu_{max} = \frac{e}{h}\bar{V}<br>$$</p><p>的確和電壓成正比。</p>          </div><p>倫琴研究 X 光並在無意間發現可以利用 X 光掃描物體結構。於 1901 年獲得第一屆諾貝爾獎。X 光在醫療的應用之一便是電腦斷層掃描 (Computer-Assisted Tomography, CAT)，原理是利用 X 光很強的穿透性。</p><h2 id="Compton-Effect-康普頓散射">Compton Effect (康普頓散射)</h2><p>不在課程範圍，可以查 wiki：<a href="https://zh.wikipedia.org/zh-tw/%E5%BA%B7%E6%99%AE%E9%A0%93%E6%95%A3%E5%B0%84%E3%80%82">https://zh.wikipedia.org/zh-tw/康普頓散射。</a></p><p>跟光電效應很像，不過主角換成光子。大概是高能光子打到其他物質 (例如電子) 上時，光子會損失一些能量，導致波長變長。逆康普頓效應則是光子獲得能量導致波長變短。</p><ul><li>康普頓效應重要應用：癌症的放射療法</li><li>逆康普頓效應則可以解釋天體物理學的一些現象。</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> course note </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微積分筆記：Ch.11 Sequences + Series</title>
      <link href="/2023/02/21/calculus/"/>
      <url>/2023/02/21/calculus/</url>
      
        <content type="html"><![CDATA[<style>.lv1 {    color: red;    font-weight: bold;}.lv2 {    color: #e89a13;    font-weight: bold;}.lv3 {    color: #bfad0b;    font-weight: bold;}.lv4 {    color: #27cf40;    font-weight: bold;}</style><!-- ------------------------------------------------------------- --><p>// Under Construction</p>]]></content>
      
      
      
        <tags>
            
            <tag> course note </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2022 ICPC Regional 桃園站</title>
      <link href="/2022/11/20/2022icpcregional/"/>
      <url>/2022/11/20/2022icpcregional/</url>
      
        <content type="html"><![CDATA[<style>.lv1 {    color: red;    font-weight: bold;}.lv2 {    color: #e89a13;    font-weight: bold;}.lv3 {    color: #bfad0b;    font-weight: bold;}.lv4 {    color: #27cf40;    font-weight: bold;}</style><p>大學競賽生涯的第一場大比賽，發個文紀錄一下，順便翻新了一下 Blog（好久沒寫文了）。</p><p>內文包含近期比賽紀錄、心情札記還有 Regional 比賽狀況。</p><span id="more"></span><h1>成績</h1><table><thead><tr><th style="text-align:center"><strong>Contest</strong></th><th style="text-align:center"><strong>Score/Total</strong></th><th style="text-align:center"><strong>Rank</strong></th></tr></thead><tbody><tr><td style="text-align:center"><strong>新生賽</strong></td><td style="text-align:center"><strong><span class="lv4">520</span>/600</strong></td><td style="text-align:center"><strong>2</strong></td></tr><tr><td style="text-align:center"><strong>年度賽</strong></td><td style="text-align:center"><strong><span class="lv4">12</span>/13</strong></td><td style="text-align:center"><strong>5</strong></td></tr><tr><td style="text-align:center"><strong>NCPC</strong></td><td style="text-align:center"><strong><span class="lv4">6</span>/14</strong></td><td style="text-align:center"><strong>21／佳作</strong></td></tr><tr><td style="text-align:center"><strong>TOPC</strong></td><td style="text-align:center"><strong><span class="lv4">3</span>/9</strong></td><td style="text-align:center"><strong>61</strong></td></tr><tr><td style="text-align:center"><strong>Regional</strong></td><td style="text-align:center"><strong><span class="lv4">7</span>/13</strong></td><td style="text-align:center"><strong>22／銀獎</strong></td></tr></tbody></table><h1>NCPC／TOPC</h1><p>本來開學的時候我是抱持著隨緣的心態面對今年的賽季，才剛升大一而且很強的學長姐或同屆非常多，感覺隨時都會被刷掉。</p><p>沒想到年度賽的時候發揮超常表現，封版之後逆了四題上去，就這樣意外得到了參加 NCPC 的機會。</p><p>不過接下來的 NCPC 跟 TOPC 都打得非常慘，雖然 NCPC 有拿到 Regional 參賽資格（門檻很寬鬆），但兩場比賽都是交大墊底，TOPC 還直接摔到第 61 名。</p><p>這兩場打爛都是因為被相對簡單的題卡住就沒什麼心思想其他題。</p><p>TOPC 最慘，比賽只有三小時，戳了 7 題結果有 4 題出 bug，pB 是線段樹懶標初始值沒設好，pH 是因為不知道 Python 乘法是用 Karatsuba 以為是 $O(n^2)$ 結果就卡住不知道該怎麼辦（我們還沒有 NTT 模板），pG 初選出過一模一樣的題目，只是太晚才讀題所以來不及寫完。</p><p>我發現我打三小時比賽的表現 &lt;&lt;&lt;&lt; 五小時比賽，給我五小時我可以想出較難的題目，但我真的沒辦法那麼快就把水題寫掉，猜是因為做題太少導致沒辦法看到水題就反射性地想出毫無瑕疵的做法。</p><p>NCPC 跟 TOPC 之後陷入了情緒低潮，打完 TOPC 的當下只覺得很丟臉，認為年度賽晉級純粹是運氣好，完全不該得到 Regional 資格。而且不光是因為比賽沒打好，還因為碰到期中週，心態還沒調適過來就又有期中的壓力，所以那陣子常常藉口要讀期中而缺席 PCCA 的團練，其實一半的原因是因為我在逃避比賽的挫敗感。</p><p>情緒還沒有完全恢復，Regional 很快就到了。已經一個多月沒有寫題目，所以沒有抱任何期待，連銅獎有沒有機會都不知道，內心一直想逃避這場比賽，結果焦慮到正式賽前一天失眠到凌晨 4 點多，只睡了兩個小時。</p><h1>Regional 正式賽當天</h1><p>早上還好有喝咖啡，開賽前一小時精神就上來了。</p><p>本來心裡一直想逃避，但是真的到了比賽會場後，也許是被周圍的環境感染，大家都很開心地聊天、認親，有跟台大的、海大的、Code Community 還有其他認識的人打到招呼也寒暄了一下，焦躁不安的感覺很快就消失了不少，當下只覺得這裡真的好棒，有冷氣、場地乾淨、鍵盤敲起來很舒服、現場氣氛很歡快…一切都很舒適，我告訴自己要好好享受這場比賽，畢竟一年就只有這麼一次。</p><p>開場之後我跟 Ian 讀題，Benson 設定 .vimrc 還有 shell 檔，pM 讀完後發現是並查集裸題，但在這之前 Ian 就說 pA 也是簽到題就上去寫，我讀完 pM 之後就去讀其他題。</p><p>他寫了 10 分鐘後我覺得不對勁，拿了題目來看，狗幹打表題，馬上跟他要了 coding 權把 pM 開掉，這時候他去讀其他題目。</p><p>我開 pM 的時候 Ian 讀完 pC，水題，直接開掉。</p><p>pG Benson 開掉之後，跟 Ian 一起打表開掉了 pA。</p><p><strong>到這裡過了約 1 hr，進入停滯期。</strong></p><p>Ian 拿給我看 pJ，想法不難只是 case 有點多，那時候 Benson 還在想 pB、pF，所以我就上去先寫 pJ。</p><p>寫完 BIT 後，Benson 說他 pB、pF 有想法，我這時候剛好卡在分 case 的地方，所以換他上去寫，我到旁邊把 pJ 的 case 分清楚。</p><p>結果 Benson pF 吃 WA QQ，pB 也吃 WA，他在修 bug 的時候跟他要 pB 來看，發現我不會用排組推公式所以試著用 DP 做。</p><p>做到一半遇到瓶頸之後（DP 轉移卡在某個地方），他剛好也遇到瓶頸，所以就換我上去繼續寫 pJ。</p><p><strong>2 hr 到 3 hr 這段時間我們就這樣交替寫、交替 debug。</strong></p><p>大概 3 hr 的時候把 pJ 寫完了，丟上去一發 AC。</p><p>AC 之後就繼續想 pB，結果我跟他同時想到 DP 作法，只是狀態完全不同，因為 Benson DP 很強所以就交給他寫，以他的想法為主。</p><p>（小插曲，pB 後來公告範圍從 $10^6$ 改成 $10^9$，北市賽 2.0 =w=）</p><p>後來 Benson 發電，pB 成功 AC。過快半小時也把 pD 開掉了，其實 pD 只是題敘很長，應該要早點讀。</p><p><strong>在這之後進入燒雞期</strong>，Ian 大概從 2 hr 開始就在寫 brianfuck 那題，持續手刻 brainfuck 沒有跳題，Benson 還是找不到 pF 的 bug。我戳了記分板才發現 pI 一堆人過但我們根本還沒讀，所以我跑去戳 pI，此時剩 70 分鐘，coding 權在 Benson 手上（debug pF）。</p><p>接下來是<span class="lv1"><strong>整場耍笨最嚴重的地方</strong></span>。剩 50 分鐘的時候終於讀完 pI（可是讀錯題目，沒發現），跟 Benson 要了 coding 權寫 pI，寫完之後吃 WA，重看一次題目發現 D box 跟 G box 搞反，修了之後又重新測，這次是連範測就錯。回去讀題目發現漏考慮一個重要條件：</p><p><span class="lv1">“One D box may overlap with multiple G boxes, but only one of the them can be counted.”</span></p><p>結果又傳了一個假解上去，這時候剩下 15 分鐘才終於想通這句話的用意。</p><p><span class="lv1"><strong>這題其實是二分圖匹配</strong></span></p><p>我在搞 QQQQQQQQ</p><p>剩 15 分鐘 Benson pF 還是 debug 未果，Ian 這時候終於寫好 brainfuck，換他上去寫，結果吃 WA，超級慘。</p><p>最後比賽就結束了。</p><h1>結語／未來目標</h1><p>Regional 這場很可惜，我們太晚進入狀況，題目也沒有提早閱讀，導致一堆簡單題就這樣被放到後半場，甚至是想到作法但來不及寫 (pI 的二分圖匹配)。</p><p>雖然只拿 22 名但還是遠超出我的預期，因為 TOPC 之後我真的對自己一點信心都沒有。</p><p>比賽結束後很開心，有好好享受到比賽，還認識了不少人（成大、海大、Code Community），唯一的缺憾是那天完全不餓，點心只吃一些豆皮壽司跟兩包堅果 QQQQQ</p><p>大學第一年賽季暫時告一段落！</p><p>接下來等這學期的期末結束之後，寒假、下學期打算把重心放在競程上，只修最低限度的必修選修，剩下時間我決定拿來練題 + 補不足的知識點。希望第二年能抱一座金獎或是爭取到出國打 Regional 的機會！</p><p>列一下明年賽季之前要完成的目標：</p><ol><li>Codeforces 橘色／AtCoder 黃色</li><li>搭配 IOIC 講義把<a href="https://hackmd.io/EyLz58djR_qgZbYNqIcR5A?view">技能樹點滿</a>，具體該練哪些之後會安排</li><li>把之前 virtual 的比賽還有這幾場題目補掉</li></ol><p>大三之後也許會有更重要的事要做，所以現在可能是能高強度練競賽的最後機會，希望不要再重犯高中的錯誤，不要留下任何遺憾！</p><h1>照片們</h1><img src="/2022/11/20/2022icpcregional/owo0.png" class><img src="/2022/11/20/2022icpcregional/owo1.jpg" class><img src="/2022/11/20/2022icpcregional/owo2.jpg" class><img src="/2022/11/20/2022icpcregional/owo3.jpg" class><img src="/2022/11/20/2022icpcregional/owo4.jpg" class><img src="/2022/11/20/2022icpcregional/owo5.jpg" class>]]></content>
      
      
      
        <tags>
            
            <tag> competitive programming </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>繁星心得和讀書方法分享</title>
      <link href="/2022/03/25/applyforcollege/"/>
      <url>/2022/03/25/applyforcollege/</url>
      
        <content type="html"><![CDATA[<style>.lv1 {    color: red;    font-weight: bold;}.lv2 {    color: #e89a13;    font-weight: bold;}.lv3 {    color: #bfad0b;    font-weight: bold;}.lv4 {    color: #27cf40;    font-weight: bold;}</style><!-- ======================================================================== --><p>這篇文主要是介紹繁星的作業流程，還有給一些心態上的建議，最後會分享一些我讀段考、學測的方法。希望可以幫助到想用繁星入學／考學測的學弟妹，或是在校成績不錯的也可以參考一下 &gt; &lt;</p><p>文章超長，可以分段看完，或是有需要再上來看 :D</p><span id="more"></span><p>本來我打算用 APCS 組的管道申請頂大資工，因為我數 A 炸得很慘，我甚至連分科測驗的講義都買好了。3 月初的時候報名繁星只是抱著簽樂透的心態，報名完後就開始整理備審要用的資料。</p><p>沒想到就這樣上了 =w=</p><!-- ======================================================================== --><h1>自我介紹</h1><ul><li>師大附中資訊科學班</li><li>繁星錄取陽明交大資訊工程學系</li></ul><h2 id="成績">成績</h2><ul><li><p><strong>學測成績</strong></p><table><thead><tr><th style="text-align:center"><strong>科目</strong></th><th style="text-align:center"><strong>級分</strong></th><th style="text-align:center"><strong>原始分數</strong></th><th style="text-align:center"><strong>15級分線</strong></th></tr></thead><tbody><tr><td style="text-align:center">國文</td><td style="text-align:center"><strong>14</strong></td><td style="text-align:center">74 (國綜) + 35.5 (國寫) = <strong>72.5</strong></td><td style="text-align:center">74.8</td></tr><tr><td style="text-align:center">英文</td><td style="text-align:center"><span class="lv4"><strong>15</strong></span></td><td style="text-align:center">68.67 (選擇) + 7 (翻譯) + 17.5 (作文) = <strong>93.17</strong></td><td style="text-align:center">86.9</td></tr><tr><td style="text-align:center">數A</td><td style="text-align:center"><strong>13</strong></td><td style="text-align:center"><strong>72</strong></td><td style="text-align:center">77.9</td></tr><tr><td style="text-align:center">數B</td><td style="text-align:center"><strong>14</strong></td><td style="text-align:center"><strong>90</strong></td><td style="text-align:center">92.4</td></tr><tr><td style="text-align:center">自然</td><td style="text-align:center"><span class="lv4"><strong>15</strong></span></td><td style="text-align:center">66.8 (選擇) + 50.8 (混合) = <strong>117.6</strong></td><td style="text-align:center">112.7</td></tr><tr><td style="text-align:center">社會</td><td style="text-align:center"><span class="lv4"><strong>15</strong></span></td><td style="text-align:center">76 (選擇) + 45 (混合) = <strong>121</strong></td><td style="text-align:center">115.7</td></tr></tbody></table></li><li><p><strong>學業成績平均</strong><br>只列出有前 10% 的科目，完整報表見文末附錄。</p><table><thead><tr><th style="text-align:center"><strong>科目</strong></th><th style="text-align:center"><strong>分數</strong></th><th style="text-align:center"><strong>排名</strong></th></tr></thead><tbody><tr><td style="text-align:center"><strong>總分</strong></td><td style="text-align:center"><strong>86.76</strong></td><td style="text-align:center"><span class="lv4"><strong>3%</strong></span></td></tr><tr><td style="text-align:center">英文</td><td style="text-align:center">93.20</td><td style="text-align:center"><span class="lv4"><strong>5%</strong></span></td></tr><tr><td style="text-align:center">數學</td><td style="text-align:center">94.50</td><td style="text-align:center"><span class="lv4"><strong>1%</strong></span></td></tr><tr><td style="text-align:center">化學</td><td style="text-align:center">87.50</td><td style="text-align:center">6%</td></tr><tr><td style="text-align:center">地理</td><td style="text-align:center">86.67</td><td style="text-align:center"><span class="lv4"><strong>2%</strong></span></td></tr><tr><td style="text-align:center">歷史</td><td style="text-align:center">81.67</td><td style="text-align:center">7%</td></tr><tr><td style="text-align:center">音樂</td><td style="text-align:center">92.50</td><td style="text-align:center"><span class="lv4"><strong>3%</strong></span></td></tr><tr><td style="text-align:center">美術</td><td style="text-align:center">94.00</td><td style="text-align:center">7%</td></tr><tr><td style="text-align:center">資訊科技</td><td style="text-align:center">96.00</td><td style="text-align:center">9%</td></tr></tbody></table></li></ul><h2 id="課業之外">課業之外</h2><p>主要是玩資訊能競，數學能競沒有在練，頂多考考 AMC 跟 AIME 而已。</p><h3 id="資訊">資訊</h3><ul><li>APCS 觀念 5 級／實作 5 級</li><li>2021 臺北市資訊學科能競 三等獎</li><li>2021 資訊之芽算法班 優秀結業</li><li>2021 TOI 初選 Rank. 29</li><li>2021 NPSC Rank. 17 佳作</li></ul><h3 id="數學">數學</h3><ul><li>2020 AMC10 + AIME</li><li>2021 AMC12 + AIME</li></ul><h3 id="英文">英文</h3><ul><li>2019 校內作文比賽 Rank. 2</li><li>2020 校內單字比賽 Rank. 2</li><li>TOEIC 880 (2019考)</li></ul><!-- ======================================================================== --><h1>繁星流程</h1><p>繁星有分八類學群，一類是文科，二類是理工、三類是生醫，四到七類是術科，八類是醫學系跟牙醫系，醫學跟牙醫特別從三類獨立出來並且有二階面試。流程上是一二三類一起，剩下的學群跟一二三類獨立，因此我只介紹前三類繁星的流程。</p><p>P.S. 以下說明的流程會以附中為例，校內撕榜、決定推薦序的流程跟時程各校都會有些微差別。</p><h2 id="成績單">成績單</h2><p>如果總平均有前 50% 的話，下學期一開始就會拿到各科 % 數表。</p><p>繁星採計的分數是從高一上到高二下共四個學期，再加高三上的國文跟英文，另外繁星的自然科（物理、化學、生物、地科）不看選修，只會看高一的必修，高二的成績會以探究實作替代。所以高二選修物理、化學成績再高也不能用在繁星。</p><p>個人覺得這對我來說很不利。高二的物化都讀得很認真，高二上物理學期成績甚至滿分，結果拿到表才知道繁星根本不看。更慘的是探究實作碰到很機車的老師，跟那些老師有不少過節，結果學期成績都 80 以下。</p><h2 id="說明會">說明會</h2><p>有些學校應該會辦繁星說明會，附中是辦在二月底，記得一定要參加。如果忘記參加的話可以自己讀繁星的簡章，或是參考<a href="https://www.youtube.com/c/%E7%94%84%E6%88%B0%E5%AD%B8%E7%BF%92%E9%A1%A7%E5%95%8F%E4%B8%AD%E5%BF%83">甄戰學習顧問</a>、<a href="https://www.youtube.com/channel/UCcy2ZtcNDXUqkHFDoq1Q2zQ">47仕親雲端輔導室</a>的影片來了解繁星的規則。</p><p>我那時候忘記參加說明會，所以後來是看簡章還有<a href="https://www.youtube.com/watch?v=-Nw43J94aAc">這支影片</a>搞懂繁星規則。</p><h2 id="報名">報名</h2><p>三月初學測成績一公布，繁星就開始報名了。報名時間有一個禮拜，所以可以慢慢決定要填什麼校系。</p><p>要注意的是，<strong>繁星只要錄取了，不論放棄與否都不可以參加個人申請</strong>，繁星填的志願要確定是你最喜歡的校系或是夢幻志願，一旦錄取要放棄的話就只能分科、重考。</p><p>可以搭配往年繁星的最低錄取標準、各校志願上限決定怎麼填：<a href="https://www.reallygood.com.tw/newExam/inside?str=256B8EE63303B43153CF4104033C1666&amp;print_id=10012#%E7%B0%A1%E7%AB%A0">111年繁星</a>。</p><p>報名表要自己從學校網站下載，共有兩張表：申請表跟志願表。這個階段只要填申請表，按照上面的指示填好就行了。</p><img src="/2022/03/25/applyforcollege/signup.jpg" class><h2 id="撕榜">撕榜</h2><p>撕榜的意思就真的是所有人輪流上去把你要的榜單撕下來。過程很刺激，中途會一直祈禱你前面的人不要把你要的學校撕走。成功撕中了就直接到旁邊在榜單上簽名，如果不幸失敗，就直接右轉簽放棄切結書然後離場，滿殘酷的。</p><img src="/2022/03/25/applyforcollege/rank.jpg" class><p>報名截止過一兩天就會公布撕榜順序。我們學校排順序的方法是照 %數 $\rightarrow$ 學測成績 $\rightarrow$ 在校原始分數。</p><img src="/2022/03/25/applyforcollege/order.png" class><p>我因為只有 3% 所以被排到第 11 個，本來以為交大無望，結果撕榜當天我前面的人的選擇：</p><table><thead><tr><th style="text-align:center"><strong>順序</strong></th><th style="text-align:center"><strong>撕榜結果</strong></th></tr></thead><tbody><tr><td style="text-align:center">1</td><td style="text-align:center">台大二類</td></tr><tr><td style="text-align:center">2</td><td style="text-align:center">台大二類</td></tr><tr><td style="text-align:center">3</td><td style="text-align:center">政大一類</td></tr><tr><td style="text-align:center">4</td><td style="text-align:center">中醫三類</td></tr><tr><td style="text-align:center">5</td><td style="text-align:center">台大一類</td></tr><tr><td style="text-align:center">6</td><td style="text-align:center"><span class="lv1"><strong>放棄</strong></span></td></tr><tr><td style="text-align:center">7</td><td style="text-align:center"><span class="lv1"><strong>放棄</strong></span></td></tr><tr><td style="text-align:center">8</td><td style="text-align:center">台大一類</td></tr><tr><td style="text-align:center">9</td><td style="text-align:center">清大二類</td></tr><tr><td style="text-align:center">10</td><td style="text-align:center"><span class="lv1"><strong>放棄</strong></span></td></tr><tr><td style="text-align:center"><strong>11 (me)</strong></td><td style="text-align:center"><span class="lv4"><strong>交大二類</strong></span></td></tr></tbody></table><p>就這樣撕中了 zzzzzz</p><h2 id="志願表">志願表</h2><p>成功撕到榜單後，隔天就要交志願表，能填的志願就只有<strong>你撕的那個學校和類群</strong>的所有科系，要注意有限制志願數。</p><p>我的志向很明確，所以只填了資訊工程系。</p><img src="/2022/03/25/applyforcollege/willing.jpg" class><h2 id="分發">分發</h2><p>撕榜完之後，學校就會公布正式的推薦名單。這裡要注意，同一間大學的名單還要再排推薦序，而且<strong>一到三學群是全部一起排</strong>。</p><p>我是第一個撕交大的，所以是交大第一序。</p><img src="/2022/03/25/applyforcollege/rank2.png" class><p>分發有兩輪，第一輪結束有缺額才會進行第二輪。第一輪時<strong>同一間大學對單一高中只能錄取一名學生</strong>，所以只要第一序的學生錄取了，二序以後的學生就只能等第二輪。所以撕榜的時候要想清楚，如果第一志願第一序被撕走了是否要撕第二序，或是撕其他學校。我有聽說台大第三序的成功繁上國企系，但其他我就不清楚。</p><p>總之交完志願表後就可以躺著等放榜了，或是趁這段時間<s>趕快多燒點香多拜拜</s></p><p>放榜完之後如果上了，那恭喜你可以直接獲得 6 個月的暑假，好好規劃一下要做什麼事，先修、考駕照、學習新技能、…這是非常寶貴的機會，不要浪費。我自己是打算先修大一的微積分跟普物，然後把一些基本的生活技能學起來，例如下廚、考駕照；如果落榜了那就好好思考要個申再戰或是拼指考。</p><p>再重申一次，<strong>繁星只要錄取了，不論放棄與否都不可以參加個人申請</strong>。</p><!-- ======================================================================== --><h1>建議</h1><h2 id="心態">心態</h2><p>滿意外就這樣上交大了，交大資工今年的 % 數門檻出奇地低，大概是因為數 A 集體燒雞吧，有很多人 % 數夠但學測數 A 沒有到頂標。</p><p>先不管繁星制度的目的跟成效，我認為繁星很像簽樂透，算是高中三年有好好讀書的獎勵， % 數跟學測有到標準就去試試看，運氣好的話就提早解脫，沒有的話也無妨，回歸個申／分科的管道就好。</p><p>我本來就已經計畫要做備審跟準備資工面試和筆試，繁星只是順便試試手氣，真的上了我也不覺得驕傲。我這三年的確花了不少力氣顧課業跟準備學測，但誰何嘗不是為了自己的目標努力了很久，既然運氣好上岸了，我就心懷感激地接受老天的餽贈，也真心為還在努力做備審跟準備分科的同學加油。</p><p>繁星從頭到尾都是運氣遊戲，光是同個校系每年的錄取標準變動就很大了，撕榜時還要看排在你前面的人意願是什麼，基本上<strong>不是第一序的話上榜率會低很多</strong>，只能等缺額進第二輪篩選，熱門科系的話更不可能。</p><p>不建議打從高中一開始就決定只靠繁星升學，或是為了衝高 % 數會考時高分低填。能到越前段的學校越好，不只資源相對較多，最重要的是能遇見更好的同儕，遇強則強。跟著那些強者、觀察他們的學習態度跟方法真的會讓自己的眼界更開，不自覺就會有變強的動機，到那個環境去才知道天有多高（我們班上就有一堆數奧、資奧、語奧的電神zzz）。這些機遇在前幾志願的學校才比較多，不要為了一個升學制度限縮了自己的格局。</p><p>另外一個原因是高中三年如果都只有讀書真的很無趣，有機會就好好探索、鑽研自己的興趣，了解自己以後想讀什麼科系比追求無謂的排名重要太多了。我自己在課業之外有入坑資訊學科能力競賽，儘管表現不怎麼亮眼，但這三年我認識了很多同樣熱愛資訊的朋友，也學了不少資料結構跟演算法，更讓我確定資工就是我的目標科系。</p><h2 id="讀書方法">讀書方法</h2><p>分享一下平常怎麼讀書的還有準備各科段考的方法，我只是純分享，不是教學，所以僅供參考。然後我是想到什麼就寫什麼，所以內容會雜亂一些。</p><p>怕篇幅過長，學測的準備方法我會放在另一篇文章。</p><h3 id="大原則">大原則</h3><p>我在讀一個範圍的課本或講義之前，都一定會先翻目錄，確定好接下來要讀的內容的大綱。例如化學選修 IV 的氧化還原反應：</p><blockquote><p>氧化數<br>常見氧化劑／還原劑<br>平衡方法：氧化數法／半反應法<br>氧還滴定<br>電化電池／電動勢<br>標準還原電位／標準氫電極<br>常見電池：乾電池、鉛蓄電池、氫氧電池<br>電解<br>電鍍</p></blockquote><p>把要讀的範圍整理清楚，接下來就依序把該讀的知識點一一吸收進腦裡，讀完就劃掉。比起直接一股腦地開始讀，這個方法會比較有目標感，也更容易集中精神，避免那種不知道有多少東西要讀的疲憊感。</p><p>我讀的時候不會特別規定自己要連續讀多久，通常讀 1 小時或是剛好讀完某科我就會開始休息，如果幸運一點進入心流狀態大概 2~3 小時，休息時間 20 分鐘，這時候會上廁所、裝水、滑手機、放空或是睡覺。</p><p>我是非常容易分心的人，所以讀書之前我一定會把手機放到書桌以外的地方，但不會放太遠因為我習慣戴藍芽耳機聽音樂。</p><h3 id="段考準備／答題技巧">段考準備／答題技巧</h3><p>段考我通常是考前一個禮拜才開始複習，真心建議平常上課要認真聽，就算老師講課講得很爛也可以利用上課時間自學該科的內容，後面複習的時候會輕鬆很多。</p><p>以下會按照科目分別分享準備方法／唬爛撈分的技巧，考試技巧會以附中段考的出題模式為主，然後我國文沒那麼強所以比較沒參考價值，社會就不寫了因為我<s>每次段考社會都是考前一天才硬背，考試也亂猜</s>。</p><h4 id="國文">國文</h4><ul><li>課本／習作／補充講義</li><li>讀的順序：按照書籍的順序，不要按照課次。我的意思是按照課本 L.1～L.4 $\rightarrow$ 習作 L.1～L.4 而不是 L.1(課本+習作+講義) $\rightarrow$ L.2(課本+習作+講義)。按照後者的順序很容易讀完一課時間就用掉一大半，而且會沒力氣往下讀（除非你有時間跟毅力）。</li><li>國文雖然大部分人都厭惡，但我覺得可以用<strong>欣賞</strong>的角度讀課文，想像作者寫這篇文背後的原因跟故事，就當作是逛展覽／博物館，一味排斥只會讓知識更進不了腦袋，徒費時間。</li><li>考前半小時可以翻翻形音義然後硬背，有默寫的話也可以趁機複習。</li><li>答題順序：單選形音義 $\rightarrow$ 多選形音義 $\rightarrow$ 課文題 $\rightarrow$ 混合題 $\rightarrow$ 單選閱測 $\rightarrow$ 多選閱測。</li><li>形音義跟課文題都很單純，會就秒殺，不會你再怎麼想都想不到，隨便猜就趕快往下寫。</li><li>混合題其實很好拿分，手寫不要看到一堆格子就害怕，文章看完再用自己的話解釋基本上都能拿滿，頂多扣一兩分。</li><li>閱測先寫白話文／科普文章，再來是文言文，詩詞就看個人造化（我詩詞很爛）。然後老師有時候會放水，會出習作／講義出現過的文章。</li></ul><h4 id="英文-2">英文</h4><ul><li>底力很重要。如何提升英文底子可以去搜尋其他文章。多益有金色的實力（$\geq 860$ 分）就足夠應付附中段考。</li><li>課本／雜誌</li><li>段考有個很機車的題型，手寫填空單字，就是給一句話然後挖掉中間 (ex. w___k) 要你填出單字，偏偏只能填課本的單字。解決方法是考前 20 分鐘快速翻閱課本單字然後硬背，考試開始時優先把這大題寫掉。</li><li>聽力跟克漏字都是雜誌文章，所以考前一定要看雜誌，不然就只能用硬實力裸考。</li><li>答題順序：手寫（單字填空／翻譯） $\rightarrow$ 閱讀測驗 $\rightarrow$ 篇章結構、文意選填 $\rightarrow$ 單字選擇題 $\rightarrow$ 克漏字。考試時間緊迫，閱測配分重 + 需要時間，不要在有考試時間不夠的壓力下才寫閱測。</li><li>閱測讀法：看題敘（不要看選項） $\rightarrow$ 抓住問題核心 $\rightarrow$ 讀文章 $\rightarrow$ 答題。理想作答時間是 6 分鐘／一篇閱測。</li><li>單字不會就憑直覺猜，克漏字就抓前後文判讀，常考概念關係代名詞、同位語、特殊動詞（使役／感官／連綴）、字詞慣用搭配，考前務必要搞懂。</li></ul><h4 id="數學-2">數學</h4><ul><li>刷題</li><li>講義偶爾會有難題，寫到卡住的時候請不要直接翻答案，自己練習思考。卡太久可以跳題，真的只剩這題還是想不到的話那就看答案，看詳解的時候也盡量不要一口氣讀完，讀個一兩行（類似提示）再想想看會不會做這題。</li><li>附中段考不像建中或雄中，難度不高，幾乎都是課本、講義的題型，不要粗心太多都可以拿 90 幾或是滿分。</li><li>答題順序：多選最後寫。有些複雜的多選題幾乎等於五題填充題，那種 CP 值不高的題目就最後寫就好。</li></ul><h4 id="物理">物理</h4><p>高一必修物理很水，沒有複雜計算，幾乎都是觀念題，有計算的話也只有國中程度而已，考前一兩個小時才開始讀都還來得及。高二開始的選修物理才算是高中的世界。所以下面講的是選修物理要怎麼讀。</p><ul><li>刷題</li><li>課本例題、文末練習題／習作</li><li>講義有時間再寫，時間不夠可以寫最後整章驗收的部分就好。</li><li>物理題目常常都只有一堆代號沒有實際數字，可以靠練題目熟悉。</li><li>要有個觀念，高中物理是<strong>連課本的題目都很難</strong>，不再像高一的時候考前隨便看看就好。想考好物理請多花時間寫題目，先理解、背熟公式，接著熟悉常見題型、建模、畫力圖的方法。物理題目常常都是看出梗後套公式秒殺，但沒有<strong>練題</strong>的話連怎麼下手都會一頭霧水。<blockquote><p>解力學題目常見技巧是把一些物品組合成一個系統，用系統的方式分析受力情形然後算加速度，還有一個重要觀念是「非超距力都一定要接觸物品才能使物品受力」，我當初卡這個卡很久，後來也是靠練題才學會。</p></blockquote></li><li>答題順序：多選最後寫，理由跟數學很像。</li><li>單選卡題要跳，混合題很好拿分不要放掉。</li></ul><h4 id="化學">化學</h4><ul><li>刷題</li><li>準備方法跟物理很像，也都是要練過題目才會知道考點是什麼。比較不一樣的是刷題之前可以先讀過課本，把重要的觀念好好釐清。我覺得翰林的化學課本寫得很好，會一步步引導你搞懂各個知識點，還有很多插圖輔助理解。</li><li>答題方式也跟物理差不多。</li><li>題目數字常常很醜，有些題目連答案也都很醜／需要估計，要有心理準備不要害怕炸開那些數字。</li></ul><h4 id="生物">生物</h4><p>我是理工類組，所以生物只有學到必修範圍，選修生物我沒有讀過。稍微翻過課本只覺得好難，讀得動選修生物的都是超人。</p><p>老實說必修生物算還好，算是國中範圍的加深加廣。而且範圍很少，只有顯微鏡、細胞、遺傳、演化。但每個主題都常常會有很多易混淆名詞，例如遺傳學的雜交、自交、試交、互交、反交還有單基因、多基因、中間型／半顯性、等顯性／複等位基因遺傳。<strong>建議讀的時候整理一份筆記</strong>，考完不要丟可以留到準備學測用，因為到高三一定會忘掉。</p><h4 id="地科">地科</h4><p>自然最難的科目，範圍很廣，上至天文、大氣、天氣和氣候，下至地質、海洋結構、洋流、潮汐。很多觀念都是環環相扣，非常容易搞混和遺忘（個人覺得最難搞的是恆星的周年運動跟周日運動 =w=）。建議讀的時候<strong>一定要搞懂每個觀念的前因後果</strong>，整理筆記釐清每個知識點。</p><p>舉幾個例子來說明地科是很重因果關係的科目：</p><ol><li>地球容易進入冰河時期的條件：夏季氣溫低 $\Rightarrow$ 自轉軸傾角要小，北半球夏季要位於遠日點。<blockquote><p>知識點：米蘭科維奇循環、冰雪覆蓋正回饋效應<br>原因：北半球大陸面積較大 $\Rightarrow$ 自轉軸傾角小 + 北半球遠日點 $\Rightarrow$ 高緯大陸冰雪不易融化 $\Rightarrow$ 又因為冰雪反照率高，所以高緯地區收到的太陽輻射會更少 $\Rightarrow$ 冰雪面積更大 $\Rightarrow$ … $\Rightarrow$ 冰河時期</p></blockquote></li><li>新仙女木事件（12000 年前的短暫回冷事件）<blockquote><p>知識點：末次冰盛期、溫鹽環流<br>末次冰盛期後氣候回暖 $\Rightarrow$ 北美洲冰原快速消融 $\Rightarrow$ 大量淡水注入北大西洋 $\Rightarrow$ 海水密度下降，難以下沉 $\Rightarrow$ 溫鹽環流減弱 $\Rightarrow$ 低緯度熱量無法帶至高緯度 $\Rightarrow$ 高緯區變冷</p></blockquote></li></ol><!-- ======================================================================== --><h1>附錄</h1><h2 id="一、成績百分比完整報表">一、成績百分比完整報表</h2><img src="/2022/03/25/applyforcollege/reportcard.png" class><h2 id="二、好用資源">二、好用資源</h2><p>推薦這兩支影片：</p><ul><li><a href="https://www.youtube.com/watch?v=iFSVMuBDMws">大腦學習法—頂尖學者的秘訣</a></li><li><a href="https://www.youtube.com/watch?v=DgbSc6Ys710">解鎖大腦潛能—史丹佛學者的秘訣</a><br>影片裡面提到很多大腦記憶和思考的原理，我平常讀書的方法跟技巧有一部分跟影片所講的有重疊。</li></ul><p>然後我平常讀書聽的音樂頻道：</p><ul><li><a href="https://www.youtube.com/c/MySoulYourBeats/playlists">MSYB</a></li><li><a href="https://www.youtube.com/c/MarK1Ira/playlists">HDSounDI</a></li><li><a href="https://www.youtube.com/c/FoxSailorMusic/videos">Fox Sailor</a>（風格：Medival/Epic）</li><li><a href="https://www.youtube.com/watch?v=eMFRRL-pkyM&amp;t=1709s">Beltaine</a>（風格：Celtic）</li><li><a href="https://www.youtube.com/watch?v=xjSp2sIQAWY&amp;list=PL4WxZovLB7SZ1G5vY3G0LCmMZ53JsAYGD">Neal K sound</a>（風格：鋼琴純音樂）</li><li><a href="https://www.youtube.com/watch?v=VhnDJTSdmkI&amp;t=1293s">Rigël Theatre</a>（風格：Ethnic/Celtic）</li><li><a href="https://www.youtube.com/watch?v=Umefib9zCvA">Roa Music</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> study </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSES Movie Festival Queries</title>
      <link href="/2022/02/27/TOI-D-14/"/>
      <url>/2022/02/27/TOI-D-14/</url>
      
        <content type="html"><![CDATA[<!-- TOI 初選剩 14 天zzzz --><h1>札記</h1><p>今天下午出去玩結果沒寫到什麼題 QQ。</p><p>晚上回來的時候稍微戳了一下計算幾何題目還有 CSES，然後總算把 Trie 補起來了，現在發現 Trie 不過就只是一般的樹，真的有夠簡單，早知道早點學的話就可以進全國賽了 QwQ。</p><p>來分享一下 CSES 的題目 OwO。</p><h1>CSES Movie Festival Queries</h1><p>題目連結：<a href="https://cses.fi/problemset/task/1664">https://cses.fi/problemset/task/1664</a></p><h3 id="題目">題目</h3><p>有 $N$ 條線段，每條線段有各自的起始點 $l_i$ 和結束點 $r_i$，$Q$ 筆詢問 $ql_i, qr_i$，請問從 $N$ 條線段中選出一些不重疊的，且滿足線段完整落在 $ql_i, qr_i$ 之間，最多能選多少條？</p><p>$1 \leq N, Q \leq 2 \times 10^5$</p><p>$1 \leq l_i \leq r_i \leq 10^6$</p><p>$1 \leq ql_i \leq qr_i \leq 10^6$</p><p>附註：兩條線段例如 $[1, 3], [3, 4]$ 是不重疊的。</p><h3 id="解法">解法</h3><p>這題想了好久，最後跑去戳 abcorz 簡報的提示才想到可以用 Sparse Table，我覺得好酷。</p><p>這題的 Sparse Table 是存每個時間點往後看 $2^i$ 場電影最快什麼時候可以看完。稀疏表的兩個維度是不同的，反正第一次碰到這樣的應用然後我就被暴打 =w=。</p><p>總之設 $s[k][t] \equiv $ 從 $t$ 開始看 $2^i$ 場電影最快看完的時間。</p><p>先把所有線段讀進來，開個陣列 $mir$，$mir[i]$ 存 $i$ 開頭的線段中最小的右界。</p><p>因此稀疏表的初始狀態 $s[0][t]$ 就可以用後綴 min 的方式從右掃到左計算。</p><p>接著轉移：$s[k][t] = s[k-1][s[k-1][t]]$</p><p>蓋完之後詢問就直接用位元枚舉二分搜答案就做完了。時間複雜度 $O(C \log N + Q \log N)$，$C$ 是線段的值域。</p><p>附上 code：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> n, q;</span><br><span class="line"><span class="type">int</span> spt[<span class="number">18</span>][maxt];</span><br><span class="line"><span class="type">int</span> mir[maxt];</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; q;</span><br><span class="line">    <span class="built_in">fill</span>(mir, mir+maxt, INF);</span><br><span class="line">    <span class="built_in">REP</span>(i, n) &#123;</span><br><span class="line">        <span class="type">int</span> l, r;</span><br><span class="line">        cin &gt;&gt; l &gt;&gt; r;</span><br><span class="line">        mir[l] = <span class="built_in">min</span>(mir[l], r);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> ptr = INF;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = maxt<span class="number">-1</span>; i &gt; <span class="number">0</span>; i--) &#123;</span><br><span class="line">        ptr = <span class="built_in">min</span>(ptr, mir[i]);</span><br><span class="line">        spt[<span class="number">0</span>][i] = ptr;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">FOR</span>(k, <span class="number">1</span>, <span class="number">18</span>, <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i+(<span class="number">1</span>&lt;&lt;k)<span class="number">-1</span> &lt; maxt; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (spt[k<span class="number">-1</span>][i] &gt;= maxt) spt[k][i] = INF;</span><br><span class="line">            <span class="keyword">else</span> spt[k][i] = spt[k<span class="number">-1</span>][spt[k<span class="number">-1</span>][i]];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (q--) &#123;</span><br><span class="line">        <span class="type">int</span> l, r;</span><br><span class="line">        cin &gt;&gt; l &gt;&gt; r;</span><br><span class="line"> </span><br><span class="line">        <span class="type">int</span> p = l, ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">17</span>; k &gt;= <span class="number">0</span>; k--) &#123;</span><br><span class="line">            <span class="keyword">if</span> (spt[k][p] &lt;= r) &#123;</span><br><span class="line">                ans += <span class="number">1</span>&lt;&lt;k;</span><br><span class="line">                p = spt[k][p];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>總之也是好題 :D，把我揍爛的題目都是好題 :D</p>]]></content>
      
      
      
        <tags>
            
            <tag> competitive programming </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2020 NPSC 初賽 pA — 邊緣人</title>
      <link href="/2022/02/26/TOI-D-15/"/>
      <url>/2022/02/26/TOI-D-15/</url>
      
        <content type="html"><![CDATA[<p>TOI 初選倒數 15 天，今天戳了一題滿有趣的題目，想記錄一下這題的思路跟解法，順便讓自己不要一直頹下去還沒有自覺 =w=</p><span id="more"></span><h1>札記</h1><p>這幾個禮拜都嚴重睡眠不足，連 4 個睡眠週期都睡不到</p><p>結果今天直接睡到下午一點多，根本沒做什麼事 = =</p><p>寫了一點學校的功課然後只戳了一題，今天有點廢 =w=</p><h1>2020 NPSC 初賽 pA — 邊緣人</h1><h3 id="題目-2">題目</h3><p>有 $N$ 個人（編號 $1 \sim N$）要分組，由 $1$ 號開始每 $x$ 人分成一組，最後沒有組的 $N\mod x$ 個人就是邊緣人。</p><p>定義函數 $f(i)$ 為編號 $i$ 的人在 $x = 1, 2, …, N$ 的情況中，是邊緣人的情況總數。</p><p>給定 $N, L, R$，輸出 $f(L), f(L+1), …, f( R )$。</p><p>$1 \leq N \leq 2^{40}$</p><p>$L \leq R \leq N$</p><p>$R - L \leq 3 \times 10^5$</p><h3 id="提示">提示</h3><p>你可能會用到的：</p><ol><li>高斯符號不等式：$x-1 &lt; \lfloor x \rfloor \leq x$。</li><li>調和級數：$1 + 1/2 + 1/3 + … + 1/N \approx O(\log N)$</li><li>數論分塊 :)</li></ol><h3 id="解法-2">解法</h3><p>這題是 Wiwi 放在讀書會拿來講解的題目，但我沒有聽不想被暴雷，結果想了超久才想到這題的作法 zzz。</p><p>強烈建議這題畫圖跟自己舉例。</p><p>看到 $2^{40}$ 又是數學題，明顯就是一題數論分塊題。</p><p>首先這題有個觀察，如果 $i$ 是邊緣人的話，那麼所有大於 $i$ 的 $j$ 也會是邊緣人。</p><p>接著計算答案的方式可以由 $x$ 的角度切入，枚舉 $x \in [1, N]$ 然後算每個 $x$ 會貢獻到 $[L, R]$ 當中的哪些人的答案（也就是會讓誰成為邊緣人）。但這樣複雜度會炸掉，所以我們考慮分塊。</p><p>對於 $\leq \lfloor \sqrt{N} \rfloor$ 的 $x$，可以直接枚舉每個這樣的 $x$ 然後簡單地計算。</p><p>設 $k = x \lfloor \frac{N}{x} \rfloor$，$x$ 會讓編號大於等於 $k+1$ 的人都成為邊緣人，但詢問只有問 $L \sim R$ 的人，所以只要把 $max(k+1, L) \sim R$ 的人的答案全部 $+1$（當然，$k+1$ 如果 $&gt;R$ 那就什麼事情都不用做）。</p><p>接下來處理 $&gt; \lfloor \sqrt{N} \rfloor$ 的 $x$，這時候我們換另一個角度算答案，從原本枚舉一組的大小 $x$，換成枚舉組的數量 $t$，$t \in [1, O(\sqrt{N})]$。</p><p>當一共分成 $t$ 組時，考慮一組的大小 $x$ 的範圍，可以用高斯符號的不等式性質推出：</p><p>$$\frac{N}{x}-1 &lt; \lfloor \frac{N}{x} \rfloor \leq \frac{N}{x}$$</p><p>$$\frac{N}{x}-1 &lt; t \leq \frac{N}{x}$$</p><p>$$\frac{N}{t+1} &lt; x \leq \frac{N}{t}$$</p><p>$$x \in [\lfloor \frac{N}{t+1} \rfloor + 1, \lfloor \frac{N}{t} \rfloor]$$</p><p>姑且設 $x \in [l, r]$。</p><p>然後考慮這個區間每個 $x$ 會讓某個人成為邊緣人的「開始點」，會發現開始點就是 $tx + 1$，於是把 $max(tx + 1, L) \sim R$ 的人的答案 $+1$，於是對每個 $x \in [l, r]$ 做一樣的事情，起始點分別是 $tl + 1, t(l+1) + 1, t(l+2) + 1, … tr+1$ 然後做區間加值。</p><p>最後還有個優化，由於 $t$ 很小的時候，起始點的數量會太多，複雜度還是會炸掉。然而觀察發現這些起始點大部分都會小於 $L$，所以我們可以直接先快速算小於 $L$ 的起始點有幾個，一樣要推個不等式但這裡我就不細寫，總之可以 $O(1)$ 算出。然後對於 $[L, R]$ 內起始點我們便暴力掃過它們然後做區間加值。</p><p>注意到最後才要輸出答案，所以所有的加值過程可以直接用前綴和優化單次 $O(1)$ 加值，不需要線段樹，這樣均攤複雜度會是 $O((R-L)/1) + O((R-L)/2) + … + O((R-L)/ \lfloor \sqrt{N} \rfloor) \in O((R-L) \log \sqrt{N})$。</p><p>於是總時間複雜度會是 $O(\sqrt{N} + (R-L) \log \sqrt{N})$。</p><p>以下是 <code>init()</code> 跟 <code>solve()</code> 函式的程式碼：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">ll n, L, R;</span><br><span class="line">ll ans[maxn];  <span class="comment">// map [L, R] -&gt; [0, R-L]</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; L &gt;&gt; R;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ll cut = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (; cut*cut &lt;= n; cut++) &#123;</span><br><span class="line">        ll p = <span class="built_in">max</span>(cut*(n/cut)+<span class="number">1</span>, L);</span><br><span class="line">        <span class="keyword">if</span> (p &gt; R) <span class="keyword">continue</span>;</span><br><span class="line">        ans[p-L]++;</span><br><span class="line">    &#125;</span><br><span class="line">    cut--;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">for</span> (ll t = n/cut<span class="number">-1</span>; t &gt;= <span class="number">1</span>; t--) &#123;</span><br><span class="line">        ll x = n/(t+<span class="number">1</span>)+<span class="number">1</span>;</span><br><span class="line">        ll p = t*x+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (p &lt; L) &#123;</span><br><span class="line">            ll v = (L-p+t<span class="number">-1</span>)/t;</span><br><span class="line">            p += v*t;</span><br><span class="line">            ans[<span class="number">0</span>] += v;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (; p &lt;= R; p += t) ans[p-L]++;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">FOR</span>(i, <span class="number">1</span>, R-L+<span class="number">1</span>, <span class="number">1</span>) ans[i] += ans[i<span class="number">-1</span>];</span><br><span class="line">    <span class="built_in">REP</span>(i, R-L+<span class="number">1</span>) cout &lt;&lt; ans[i] &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我知道我這樣寫一定沒有人看得懂，但當你拿起筆開始算的時候就會知道我在說什麼了，總之這題很有趣，推大家寫 :D</p><p>兩年前有參加這場 NPSC，然後我記得那時候一直盯著這題卡很久，是完全沒有任何想法乾燒 5 小時，隔了一年終於把它解決掉了，現在想想那時候真的好笨，其實現在也是 =w=。</p><h1>結語</h1><p>最近心情其實滿焦慮的，要做事情真的比我想像的多，一直擔心做不完然後又沒力氣開始做事，差一點又快撐不住崩潰zzz</p><p>幸好晚上有找朋友聊天，聊了滿久的，聊完以後心情意外好很多，也覺得有動力繼續向前了！</p>]]></content>
      
      
      
        <tags>
            
            <tag> competitive programming </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>The Start of Everything</title>
      <link href="/2022/02/07/Meow/"/>
      <url>/2022/02/07/Meow/</url>
      
        <content type="html"><![CDATA[<h2 id="DDDDD">:DDDDD</h2><p><strong>終於開了一個自己的 blog &gt; &lt;</strong></p><p>之後有寫比賽的檢討或是寫題解、演算法都會放在這裡 OwwO</p><p>終於脫離 HackMD 了！</p><span id="more"></span><p>這篇其實才是第一篇文章，在這篇之前的文章都是我從 HackMD 搬遷過來的。</p><h2 id="Info-Box">Info Box</h2><div class="note default">            <p><strong>Happiness is not having a lot, but understanding how to use binary search.</strong></p>          </div><div class="note primary">            <p><strong>Happiness is not having a lot, but understanding how to use binary search.</strong></p>          </div><div class="note success">            <p><strong>Happiness is not having a lot, but understanding how to use binary search.</strong></p>          </div><div class="note info">            <p><strong>Happiness is not having a lot, but understanding how to use binary search.</strong></p>          </div><div class="note warning">            <p><strong>Happiness is not having a lot, but understanding how to use binary search.</strong></p>          </div><div class="note danger">            <p><strong>Happiness is not having a lot, but understanding how to use binary search.</strong></p>          </div><!-- <div class="note default">                      </div><div class="note primary">                      </div><div class="note success">                      </div><div class="note info">                      </div><div class="note warning">                      </div><div class="note danger">                      </div><p>–&gt;</p><h2 id="測試-Code">測試 Code</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios_base::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;This is my first blog &gt; &lt;\n&quot;</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Meowowowowo\n&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="測試-LaTeX">測試 LaTeX</h2><p>時間複雜度：$O(n \log n)$</p><p>二次方程式公式解：<br>$$<br>x = \frac{-b \pm \sqrt{b^2 - 4ac}}{2a}<br>$$</p><p>燒邊定理：</p><p>Let $X$ be the original set.</p><p>Let $G$ be the group of operations acting on $X$.</p><p>Let $X^g$ be the set of $x$ not affected by $g$.</p><p>Let $X/G$ be the set of orbits.</p><p>Then the following equation holds:</p><p>$$<br>|X/G| = \frac{1}{|G|} \sum_{g \in G} |X^g|<br>$$</p><h2 id="測試圖片">測試圖片</h2><p>大頭貼來源：Index (魔法禁書目錄)</p><img src="/2022/02/07/Meow/index-02.png" class="">-->]]></content>
      
      
      
        <tags>
            
            <tag> meow </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2021 全國資訊學科能競模擬賽</title>
      <link href="/2021/12/05/2021nhspcmock/"/>
      <url>/2021/12/05/2021nhspcmock/</url>
      
        <content type="html"><![CDATA[<style>.lv1 {    color: red;    font-weight: bold;}.lv2 {    color: #e89a13;    font-weight: bold;}.lv3 {    color: #bfad0b;    font-weight: bold;}.lv4 {    color: #27cf40;    font-weight: bold;}</style><p>沒進全國賽，還好有這場優質的模擬賽可以過過乾癮 &gt; &lt;</p><span id="more"></span><h1>比賽資訊</h1><ul><li><a href="https://contest.nhspc.cc/ranking/Ranking.html"><strong>計分板</strong></a></li></ul><img src="/2021/12/05/2021nhspcmock/rank.png" class><h1>比賽結果</h1><img src="/2021/12/05/2021nhspcmock/result.png" class><h1>比賽過程</h1><p>幾乎沒打過 5hr OI，於是直接沿用 3hr OI 的打法，先花時間把所有題目掃過一次。</p><p>大概讀了半個小時，後面幾題沒仔細研究就想開始寫 code 了。</p><p>對題目大致上的理解：</p><blockquote><p><strong>pA</strong>：簽到題，4 次排序 + O(n) 掃過一次算答案，出到 $10^6$ 明顯就是要卡 map，結果真的一堆人被卡。</p><p><strong>pB</strong>：拓樸排序。</p><p><strong>pC</strong>：單調隊列 + 不難的數學。</p><p><strong>pD</strong>：沒想法，但看到 53 分的限制大概猜有 $O(n^2)$ 的作法。</p><p><strong>pE</strong>：感覺有點煩躁的實作，而且題敘似乎怪怪的，應該是「後面 $k$ 個人各自往前 $A_i$ 格」，題本寫 $A_i - k$。</p><p><strong>pF</strong>：從這題開始，後面的題目我就沒認真看了，這題搞懂題意後，發現還是沒想法。</p><p><strong>pG</strong>：題敘很短，但我不會數學。</p><p><strong>pH</strong>：tag 應該是 dp，但我沒認真想。</p><p><strong>pI</strong>：題目不難懂，但一點想法都沒有，看了一下暴力只有 7 分，22 分是序列的版本。</p></blockquote><p>打好模板就開寫 pA，中途忘記棋子不能跨過障礙物，算答案的時候把 $k-1$ 寫成 $C^k_2$，抓蟲抓好一陣子才發現。</p><p>一發 AC。</p><p><span class="lv4">00:59 pA 100</span></p><p>之後確定 pB 想法是對的就開掉了。</p><p><span class="lv4">01:08 pB 100</span></p><p>去上個廁所，休息了 3 分鐘，回來就開始寫 pC。</p><p>最後推數學式的時候又花了不少時間，看來智力還沒恢復。</p><p><span class="lv4">01:50 pC 100</span></p><p>休息之後開始想 pD，在上廁所的時候想到 $m$ 個出拳方式是各自獨立的，轉化一下題目後，發現了 $O(nm)$ 的 DP 作法。</p><p>令 $dp[i][w]$ 為決定好前 $i$ 個位置的拳法，得分能否為 $w$（其中 $w$ 的值域介於 $-n \sim n$ 之間），標準的背包問題。</p><p>但我一直在想有沒有複雜度更優的做法，閃過二分搜答案的想法但馬上排掉這念頭，因為顯然沒有任何單調性。</p><p>最後決定先撈 53 分。</p><p>開開心心寫完 DP 後才發現，幹忘記還要回溯答案，於是又修修改改，前後寫了快一小時。又在耍智障 = =&quot;。</p><p><span class="lv1">02:44 pD 0</span></p><p>無解的時候把 <code>return;</code> 寫成 <code>exit(0);</code>，改一下就 53 分了。</p><p><span class="lv3">02:48 pD 53</span></p><p>接下來是整場犯下最大的錯誤。</p><p>53 分拿到了，但我看到只有最後 4 筆 TLE 就一直告訴自己繼續拿滿，告訴自己再多壓一下常數會過。</p><p>反正又開始腦衝亂改 pD 的 code，也不管後面的題目有多少分可以撈。</p><p><span class="lv3">03:18 pD 53</span><br><span class="lv2">03:22 pD 14</span><br><span class="lv2">03:25 pD 6</span><br><span class="lv1">03:28 pD 0</span><br><span class="lv1">03:33 pD 0</span><br><span class="lv1">03:35 pD 0</span><br><span class="lv3">03:37 pD 53</span><br><span class="lv3">03:39 pD 53</span></p><p>我到底在幹嘛…</p><p>結論是 bitset 真的可以過，只是我現在覺得我沒過是因為回溯的常數沒有壓掉。</p><p>其實本來有想過可以開兩個 bitset 存回溯值（只有 <code>R/P/S</code> 三種），這八成也是對的，但我賽中不寫就是不寫，硬要跑去改一些無關緊要的地方，最後又浪費了快一個小時。</p><p>這時候才意識到剩不到 80 分鐘，馬上接回理智線，然後繼續往下想題目。</p><p>pE 總算看懂，但還是覺得有點煩，pF 依舊沒想法，pG 只會 5 分，pH 還是看不懂，pI 沒想法，而且暴力感覺有點難寫而且只有 7 分我連碰都不想碰。</p><p>這時候開始有點慌了，總覺得這樣下去會一分都拿不到，絕望之際突然靈光一閃，想到 pE 大概的作法，這時候我決定集中腦力思考 pE。</p><p>思考大概 20 分鐘後，發現前面有 team 被 pop 掉的時候，假設 pop 掉 $r$ 個人，後面所有 size 大於 $r$ 的人都會被旋轉 $r$ 次，其他人完全無影響。</p><p>所以可以用值域 BIT 維護「每次從隊伍中刪除的人數」的次數，大於 $max{A_i}$ 的可以忽略。</p><p>並且預處理前綴和，每次詢問第 $k$ 個人是誰就先對前綴二分搜，搜 $k$ 在哪個隊伍裡面，接著用 BIT 查詢這個隊伍被旋轉了幾次（<code>bit.query(a[team]-1)</code>），就可以知道 $k$ 是誰。</p><p>實作意外滿順的，雖然我還是寫了半小時 = =&quot;</p><p><span class="lv4">04:38 pE 100</span></p><p>剩 20 分鐘只能撈最水最好寫的分數。</p><p>發現 pG 5 分語法分，馬上撈掉。</p><p><span class="lv2">04:47 pG 5</span></p><p>22 分感覺欠三分搜，沒有驗過就開寫，結果還真的是這樣。</p><p><span class="lv2">04:56 pG 22</span></p><blockquote><p><strong>Score: 480/900, Rk: 15</strong></p></blockquote><h1>賽後檢討</h1><p>北市賽後都在搶救學分，段考完後發現已經兩個禮拜沒寫 code 了，所以我也不期望這場會打得多好。</p><p>賽中發現思考、實作都滿卡的，前面的水題不應該寫那麼久。</p><p>不過最可悲的應該是第 3 個小時了吧，一直想拿 pD 滿分還堅持不寫對的做法，腦袋不知道被什麼東西卡到，又是跟北市賽犯一樣的錯誤。</p><p>打完發現有 Rk.15，其實覺得還行，從高一 Rk.69 $\rightarrow$ 高二 Rk.27 $\rightarrow$ 高三 Rk.15，發現底力有在進步，還滿開心的。</p><p>不過這次一堆人裝弱／沒打，實際上可能 Rk.20~30 ，就算進了全國賽，大概也只能拿個四等獎吧。但我終究是沒進，終究沒辦法穿到全國賽的 T-shirt，終究沒辦法當個全職競賽選手。剩 47 天，還是認命去讀學測吧，這陣子應該不會再練競賽了。</p>]]></content>
      
      
      
        <tags>
            
            <tag> competitive programming </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2021 臺北市資訊學科能力競賽</title>
      <link href="/2021/11/14/2021thspc/"/>
      <url>/2021/11/14/2021thspc/</url>
      
        <content type="html"><![CDATA[<style>.lv1 {    color: red;    font-weight: bold;}.lv2 {    color: #e89a13;    font-weight: bold;}.lv3 {    color: #bfad0b;    font-weight: bold;}.lv4 {    color: #27cf40;    font-weight: bold;}</style><p>去年三月參加資芽（我參加了兩次），那是我入坑競程的時間點，但真正比較認真練競賽大概是四個月前的事，所以這次心得文不只包含北市賽，也包含了賽前的心路歷程(?)，打完才發現寫太長，就當作是看小說，分段看完吧(X</p><span id="more"></span><h1>趣事</h1><ol><li><p>BurnChickenLemma三人組全部三等獎，神默契www。在此立個願望，<strong>明年我們三個全部成功進選訓，一起去師大玩</strong>。</p><blockquote><p>燒雞定理 = Sam + Foxyy + Gino，名稱來源：Burnside’s Lemma</p></blockquote></li><li><p>一二三等獎的線切的意外乾淨，師大也太神。</p></li><li><p>比賽的時候一直感覺到有股靈壓，尤其比賽過一小時，本來快炸掉瞬間冷靜下來進入撈分模式，出場翻轉播紀錄，果不其然又是 joy 在發功。</p></li><li><p>下午跟建中團去玩桌遊。玩富饒之城被刺殺兩輪錢又被偷光，0 遊戲體驗 = =&quot;，然後那隻聒狐又打翻飲料，不意外。</p></li><li><p>玩碰撞機器人，Foxd 無情開電連續拿分，後來另一桌電神團也圍過來，一等三 aka DFS 大師 Alvin Chang 直接優超所有人把剩下的點全部撿走 &lt;(_ _)&gt;。</p></li><li><p>@鄭詠堯 被 Foxdd 戳爆還一直被當狗狗，雖然有點同情但打架過程真的好好笑wwww</p></li></ol><h1>楔子</h1><p>最一開始是把目標放在二等獎，結果差一點如願，雖然很可惜，但也只能笑著接受了。</p><p>定下這個目標大概是上學期期末吧，那時候被段考還有一堆死線迫近的報告壓得喘不過氣，作息大亂也讓身體也出了不少問題，跑診所醫院、諮商、吃藥，很痛苦，完全沒有活著的感覺。</p><p>翻到別人的全國賽心得文，可以去新竹玩兩天，可以認識電神，可以享受優質的比賽，可以拿全國賽專屬的 T-shirt，很帥，很威風。</p><p>另一方面是因為我不想再過那種被課業壓著過活的日子，我想真正全心投入自己喜歡的事，做我自己，哪怕學測已漸漸迫近，緩緩吞噬掉我的時間。</p><p>想進全國賽的原因就這麼單純，沒有多麼神聖，也不需要。</p><p>心之所向，身之所往，一場叛逆行旅就此開始。</p><h1>訓練</h1><p>開始練的時候是7月中，前面還在收資專的尾，另外還把高一的數專繼續延伸，跑去學FFT，包成學習歷程檔案，前後弄了兩個禮拜。</p><p>最初就把競賽演算法列出來，看有什麼要學。結果別說大科技，光基礎演算法就學的七零八落，連 Dijkstra 都不會寫。</p><p>想起年初參加 AA 競程，幾乎每場模擬賽倒數三名，被 dreamoon 說基礎功不夠，考慮很多 OJ，最後選擇從 CSES 開始刷，把基礎扎穩。</p><p>後來學校暑輔開始，上了兩個禮拜發覺極度浪費時間，於是直接退出，每天去圖書館，早上讀學測 + 下午練競賽。</p><p>剛開學一個月是我最焦慮的時候，那時候疫情升溫，一直在擔心北市賽會不會被取消，而且學弟請了防疫假，每天都能在家訓練。而我？白天昏昏沉沉地坐在教室，晚上還要推學測進度，幾乎沒有時間刷題。就算真的有空也早就疲憊不堪，沒力氣想題目。看著他一天一天變得更強，雖然有些欣慰，但更多的是實力離他越來越遠和追不上其他人的焦慮。</p><p>市賽前一個月，我發覺我在學校的情況彷彿回到暑輔，一樣糟糕，一樣在浪費時間。</p><p>思考很久，想從這糟糕的環境脫身，跟爸媽還有班導溝通很久，成功請到公假。我說服他們的理由是，第一次段考幾乎都是我自己讀還能維持班排一，證明我有顧好課業的能力，而且班導也知道我的實力並非與全國賽沾不上邊，是有機會的。一番抗衡後總算爭取到屬於自己的時間。</p><p>公假的時候基本上就是補題，把之前 vir 的建中校內賽補掉，除了花枝遊戲還沒寫其他都補完了。再來就一直刷 CSES，繼續補我不會的東西。</p><p>這時候因緣際會下接了校隊培訓的字串講師（其實我本來就有這個念頭），所以又開始學字串演算法。課表上面排定 Rolling Hash, KMP, Z Value, Suffix Array，就去翻了板中講義、建中講義、CF EDU，按順序把它們學掉，寫了一些題目後就開始準備簡報。</p><p>題外話，我覺得最大的障礙大概是 Z Value 了吧，一直搞不懂估算 Z 值下界的那個做法，打轉了兩三天，某天早上睡醒的時候忽然想通了，現在反而覺得 Z 沒那麼難。</p><p>本來要接續學 Trie 跟 AC 自動機的，但因為上課日快到不得不把時間拿去趕工簡報。誰也沒想到這次比賽我居然是被 Trie 卡掉，只能怪自己運氣太差、實力不夠吧。</p><p>剛好培訓也開始了，又學了不少東西，SOS、插頭DP、差分約束、變形 Dijkstra、二分圖匹配、高斯消去。Wiwi 把 SOS 講的很好懂，先前完全看不懂這次一聽就會；差分約束資芽就已經學會了只是還沒寫過；終於搞懂 Dijkstra 的原理＆ k 短路徑的正確作法。唯獨二分圖匹配我完全沒搞懂，之後再重學。</p><p>有堂課講整體二分、CDQ、其他資結，但我 claim 那些東西北市賽不會出現，我就算學了賽中一定刻不出來，剛好早上跟著打建中模競（燒慘），所以那堂課我在補模競的題（還沒補完），就沒跟著課堂進度。</p><p>接著輪到我上字串，前一晚 rehearse 到簡報一半就因為太累直接去睡覺，導致後半堂課講的有點卡。我覺得我整體講的還不錯，但連續講話 3 小時頭真的很暈，喉嚨也燒掉。幸好看了醫生，隔兩天就恢復了。</p><p>培訓倒數三天，被 Wiwi 餵了很多很難的題目，然後每個人要各自認領題目上來講做法，不過題目真的太難，除了電 Shaun 還有少部分人成功過關外，其他題目都幾乎是 Wiwi 親自上來講解。之後找時間再慢慢補掉吧。</p><p>最後一天早上是模擬競賽，307／Rk.6，打得還不錯。<strong>這場模擬賽對我來說很關鍵，我不只抓到了撈分的感覺，也對自己有了不少信心。</strong></p><img src="/2021/11/14/2021thspc/thspcmockrank.png" class><p>賽前一天一直在刷考古題，我很清楚自己底力不夠手感很容易斷，所以跟別人「賽前一天不做事／耍廢」的策略相反。</p><p>晚上 9 點半就上床了，不過膀胱搞事，害我一直起來上廁所，過敏發作也讓我拖到 11 點半才入睡。</p><p>隔天 6 點就起床，吃完早餐帶好東西就去師大報到了。</p><h1>賽中</h1><p>其實筆電試場意外的不錯。椅子高度很舒服，空間寬闊沒有壓迫感，重點是沒有嘈雜的鍵盤聲干擾思考，非常安靜，第一次打比賽能夠完全專注在題目上，感受不到其他人的存在。</p><p>順帶一提 Ubuntu 用起來也很舒服，編譯跟執行速度特快。感受到師大的用心(?)，希望明年初選比賽環境也是這樣的規格。</p><h2 id="賽前-30-分鐘">賽前 30 分鐘</h2><p>反正就開幕式 + 講解規則，肚子燒雞所以跑去廁所。</p><p>接著吃了兩片薄荷巧克力補血糖，去飲水機補水，然後就定位等比賽開始。</p><h2 id="開場-—-1-hr／還沒睡醒">開場 — 1 hr／還沒睡醒</h2><p>開場花了些時間熟悉環境，開好 gedit、調設定、打編譯指令、打模板、…前後過了 10 分鐘才開題。</p><p>題目可以參考 Shaun 的心得文：<br><a href="https://hackmd.io/lFPgW0mDTmW_wR1sTpEbhw?view">https://hackmd.io/lFPgW0mDTmW_wR1sTpEbhw?view</a></p><p>總之題目的 tag 大概是這樣：</p><blockquote><p><strong>pA／</strong> 上次 APCS P2 的既視感，看起來不難的語法題但我就是寫不出來的那種<br><strong>pB／</strong> 裸 trie<br><strong>pC／</strong> 看起來是 DP 但我不會，不過 80 分很甜<br><strong>pD／</strong> 看不懂<br><strong>pE／</strong> 看不懂 again<br><strong>pF／</strong> 圖著色問題，但這不是 NP 問題嗎 …？</p></blockquote><p>看完題目，心涼了一截，trie 偏偏沒寫過，A 很煩躁，C 不會，D E 看不懂，F 更不在我學過的知識範圍內。</p><p>想說 A 八成是簽到題，於是就開寫了。寫完以後範測炸開，才發現做法有問題，但我腦袋似乎還沒醒，一直亂改、亂試，好不容易範測對了，丟上去</p><p><span class="lv3">01:02 pA 71</span></p><p>蛤，只過長方形的 subtask？</p><p>然後我又繼續亂修、亂傳，中間還傳錯檔案</p><p><span class="lv1">01:05 pA 0</span><br><span class="lv3">01:07 pA 71</span></p><p>沒注意到已經過一小時了。</p><h2 id="1-hr-—-1-5-hr／啟動撈分程序">1 hr — 1.5 hr／啟動撈分程序</h2><p>心態快要炸掉之際，大概是感受到 joy 的靈壓，我的理智線突然重新接回，pA 丟旁邊，想都不想就開始往下撈分。</p><p>pB 暴力比對 62 分</p><p><span class="lv3">01:13 pB 62</span></p><p>pC 隨便 greedy 唬爛 32 分</p><p><span class="lv3">01:21 pC 32</span><br>但其實一開始有 57 分，後來好像加強測資，所以被校正回歸。</p><p>到這邊跑回去嘗試修 pA，結果沒成功。</p><p><span class="lv3">01:34 pA 71</span></p><p>pD 想到要先用高斯消去弄出本來的數字，但還是搞不懂要拿這些數字幹嘛，範測也沒認真推，直接被我跳過。</p><p>中途去上了廁所，也順便想了一下接下來的撈分順序。</p><h2 id="1-5-hr-—-2-5-hr／品庠式打法">1.5 hr — 2.5 hr／品庠式打法</h2><p>重新讀 pE，總算搞懂在幹嘛，不過暫時觀察不出題目給的建邊方式有什麼關鍵點，只好先寫 37 分的 0/1 枚舉。</p><p><span class="lv2">02:02 pE 37</span></p><p>這時候發現 pC 可以位元DP，馬上跳去寫，而且 5 分鐘就寫完了。</p><p><span class="lv3">02:10 pC 80</span></p><p>然後發現我還沒動那題 output only，所以就跳去那題開始唬爛。</p><p>先隨便寫了個 greedy 塗色，每次塗色掃過鄰點的顏色找 mex，丟上去</p><p><span class="lv2">02:28 pF 30</span></p><p>只有 30 分？<s>師大測資什麼時候這麼強了</s></p><p>小改一下 code，但有改跟沒改一樣</p><p><span class="lv2">02:34 pF 30</span></p><h2 id="2-5-hr-—-3-hr／被-trie-送下去">2.5 hr — 3 hr／被 trie 送下去</h2><p>這時候發現不對勁，pB 應該要拿滿才對，可是我完全沒有寫過 trie，這時候開始有點慌了。</p><p>匆匆跑去上廁所順便嘗試通靈 trie 的寫法，回來大概花了 10 分鐘，範測沒測丟上去，0分。</p><p><span class="lv1">02:48 pB 0</span></p><p>測範測結果發現寫爛掉，徹底沒救的爛掉。</p><p>這時想說剛剛暴力 $O(N^2 L) = 5 \times 10^9$ 都過了，感覺 rolling hash + 二分搜，順便加個剪枝（按照序列第一個數字分堆）應該有機會，我賭師大測資不會這麼強。</p><p>先把分堆寫好丟上去，</p><p><span class="lv3">02:54 pB 62</span></p><p>很棒，它是好的，接下來 rolling hash…</p><p>刻完 hash，剩兩分鐘…</p><p>刻完二分搜，剩兩秒鐘…</p><p><span class="lv1">Game Over.</span></p><h1>比賽結果</h1><h2 id="Final-Score／Rank-3">Final Score／Rank</h2><blockquote><p>Total Score：<strong>280</strong>／Rank：<strong>16</strong>／<strong>三等獎</strong><br><a href="https://sorahisa.github.io/OI/DumpedRanks/nhspc2021_tpe/ranking/Ranking.html"><strong>計分板連結</strong></a></p></blockquote><img src="/2021/11/14/2021thspc/thspcrank.png" class><h2 id="Subtasks-Gained-3">Subtasks Gained</h2><blockquote><p><span class="lv4">Tried and Accepted</span><br><span class="lv3">Tried but in Vain</span><br><span class="lv1">Supposed to Try / Easy Subtask</span></p></blockquote><p><strong>pA</strong> <span class="lv4">21</span>／<span class="lv4">23</span>／<span class="lv4">27</span>／<span class="lv3">19</span>／<span class="lv3">10</span></p><p><strong>pB</strong> <span class="lv4">29</span>／<span class="lv4">33</span>／<span class="lv3">38</span></p><p><strong>pC</strong> <span class="lv4">14</span>／<span class="lv4">18</span>／<span class="lv4">25</span>／<span class="lv4">23</span>／20</p><p><strong>pD</strong> <span class="lv1">27</span>／<span class="lv1">27</span>／<span class="lv1">46</span></p><p><strong>pE</strong> <span class="lv4">37</span>／63</p><p><strong>pF</strong> <span class="lv4">10</span>／<span class="lv4">10</span>／10／10／10／10／10／10／<span class="lv4">10</span>／<span class="lv3">10</span></p><h1>賽後</h1><p>比賽結束後，算一算分數只有 280，連一半都沒有。</p><p>對照去年的分數分布，別說全國賽了，當下覺得自己連三等都沒有，甚至掉到佳作底。</p><p>最後成績確認的時候，瞄到一堆人 300、400 多，完了，又開始慌了，越來越焦慮…</p><p>顫抖地拿起手機，打開計分板…</p><p>這計分板為什麼黃黃的？？？</p><blockquote><p><strong>280／Rk.16</strong></p></blockquote><p>打這麼爛居然有三等獎？！</p><p>出場後滿開心的，最後一年的北市賽，幸好不是佳作收尾。當初保底目標就是至少有前 20，算是滿足了心裡的部分願望。</p><p>接下來細看分數分布，二等線 317，我只要 pB 有拿滿 = 318…</p><p>…</p><p>對，差一個子題</p><p>為了弄校隊培訓，學了 KMP、Z、Suffix Array，偏偏沒有學好 trie</p><p>無奈 後悔 自責</p><p>…</p><p>剛才的喜悅為負面情緒浸染，悲喜交雜，接下來下午到晚上我都是帶著這種複雜的情緒度過。</p><p>幸好打完這篇心得的時候已經釋懷了。</p><h1>檢討</h1><ol><li>前一小時又陷入糟糕的狀態，一直認為 pA 是簽到題，一直覺得大家都過了只剩我還卡住，沒好好想清楚就亂寫。幸好有調整回來。<blockquote><p><strong>現在意識到自己已經有一定的實力了，下次碰到這種情況可以合理相信「我做不出來的，大部分人也一定會被卡掉」。</strong></p></blockquote></li><li>基本功不夠，連 trie 都不會寫，這次剛好被戳中痛點。<blockquote><p><strong>底力不足，回頭看技能樹有哪些知識點還沒點到，就去把它點滿。吃大科技之前請先把底力練好。</strong></p></blockquote></li><li>pD、pE 看了很久才看懂。pD 真的只是單純的高斯消去法，前兩天才刻過所以記憶猶新；pE 聽說是掃描線，我覺得只要好好靜下來思考就能想出正解。<blockquote><p><strong>讀題速度、精準度待加強，但除了刷題外我想不到其他特別加強這個的方法。</strong></p></blockquote></li><li>pF 我拿了 1、2、9，但聽說 10 是二分圖，覺得很怪，八成是實作又有問題但我不知道 bug 在哪。<blockquote><p><strong>多嘗試唬爛的方法，能撈盡量撈(?)</strong></p></blockquote></li></ol><p>.</p><p>我覺得最不應該發生的問題是 1.。</p><p>vir 了不少比賽，結果一不注意還是會陷入卡死的狀態。</p><p>初選、資芽認證考、校內賽、這次市賽都是因為掉入情緒漩渦而失常。</p><p>終於意識到這個問題的嚴重性，把它列入策略守則，每次比賽都要提醒自己不能卡死不能卡死不能卡死#</p><h1>It’s not the end.</h1><p>儘管與全國賽無緣，但我已經對拿了三等獎的自己很滿意了，而且最要好的另外兩個同伴也都拿了三等，滿開心的，雖然都差一點進全國XD。</p><p>反正都知道問題在哪了，接下來就繼續練吧，明年還有初選，我是不會放棄的。</p><p>然後文章開頭有提到，</p><blockquote><p>在此立個願望，<strong>明年我們三個全部成功進選訓，一起去師大玩</strong>。</p></blockquote><p>來發個祭品吧。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (我沒進 TOI) <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line"><span class="type">int</span> ramen = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">if</span> (山姆有進 TOI) ramen++;</span><br><span class="line"><span class="keyword">if</span> (Foxyy 有進 TOI) ramen++;</span><br><span class="line"><span class="keyword">if</span> (山姆跟 Foxyy 都有進) ramen++;</span><br></pre></td></tr></table></figure><p><strong>按 FB 貼文愛心就可以抽拉麵。</strong> 其他表符都不算喔XD</p><p>喔然後 @Sam @Foxyy 如果你們兩個有進的話我會單獨請你們拉麵，當然前提是我也要有進。一起加油吧。</p><p>回去練題囉 88。</p><p><span class="lv1"> I shall return. </span></p>]]></content>
      
      
      
        <tags>
            
            <tag> competitive programming </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2021 建中校隊複選 Virtual</title>
      <link href="/2021/10/24/2021ckcon2/"/>
      <url>/2021/10/24/2021ckcon2/</url>
      
        <content type="html"><![CDATA[<style>.lv1 {    color: red;    font-weight: bold;}.lv2 {    color: #e89a13;    font-weight: bold;}.lv3 {    color: #bfad0b;    font-weight: bold;}.lv4 {    color: #27cf40;    font-weight: bold;}</style><h1>比賽資訊</h1><ul><li><strong>題目</strong>：<a href="https://tioj.ck.tp.edu.tw/contests/81">https://tioj.ck.tp.edu.tw/contests/81</a></li><li><strong>計分板</strong>：<a href="https://tioj.ck.tp.edu.tw/contests/81/dashboard">https://tioj.ck.tp.edu.tw/contests/81/dashboard</a></li><li><strong>題解</strong>：<a href="https://hackmd.io/@Dn7ABYK4QAyS02iuO5ydBw/rJvk_9oBY#/">https://hackmd.io/@Dn7ABYK4QAyS02iuO5ydBw/rJvk_9oBY#/</a></li></ul><span id="more"></span><h1>比賽結果</h1><p>嚴格來說其實超時了 9 分鐘</p><p>雖然對不起良心但我不管(X，反正第一次賽中幹出懶標線段樹就是爽</p><h2 id="Subtasks-Gained-2">Subtasks Gained</h2><blockquote><p><span class="lv4">Tried and Accepted</span><br><span class="lv3">Tried but in Vain</span><br><span class="lv1">Supposed to Try / Easy Subtask</span></p></blockquote><p><strong>pA</strong> <span class="lv4">10</span>／<span class="lv3">21</span>／<span class="lv4">10</span>／<span class="lv4">16</span>／43</p><p><strong>pB</strong> <span class="lv4">7</span>／<span class="lv4">10</span>／<span class="lv4">13</span>／<span class="lv4">15</span>／<span class="lv4">20</span>／<span class="lv4">35</span></p><p><strong>pC</strong> <span class="lv4">6</span>／<span class="lv4">7</span>／<span class="lv4">10</span>／15／11／12／39</p><p><strong>pD</strong> <span class="lv4">36</span>／64</p><p><strong>pE</strong> <span class="lv1">6</span>／9／<span class="lv1">12</span>／24／21／24／14</p><h2 id="Final-Score／Rank-2">Final Score／Rank</h2><img src="/2021/10/24/2021ckcon2/result.png" class><h1>比賽過程</h1><p>賽前已經被暴雷記分板了，一片慘況甚至連 cheissmart 都沒有破台，大概心理有底這次的題目很難。</p><p>於是開賽時我打算先把能撈的分撈一撈，沒想到這策略意外奏效。</p><p>花了 12 分鐘讀題目，但這次題敘都不算難懂，所以還是讀得有點慢zzz。對題目的理解大概如下：</p><blockquote><p><strong>pA</strong>：$Q$ 次詢問帶邊權樹上 $u, v$ 兩點，求 $u, v$ 兩點的路徑長，但每次詢問完後會把 $u, v$ 路徑上的所有邊權歸 $0$。有想了一下但只想到樹鍊剖分，而且我完全不會刻zzz。</p><p><strong>pB</strong>：給一個序列，兩種屬性 $m, v$（質量跟速度），維護區間動能和 $(\sum \frac{1}{2} mv^2)$，操作有區間質量／速度加值，就裸的懶標線段樹，但要維護一堆東西而且一不小心就會有 overflow 的生命危險，滿麻煩的實作。</p><p><strong>pC</strong>：邊權皆 $&gt; 0$ 的圖上，每條邊皆有顏色，在不連續走相同顏色邊的限制下，求全點對最短路徑和。感覺是 FW 的變形但沒想法。</p><p><strong>pD</strong>：有趣互動題，$36$ 分簽到分，但剩下的 $64$ 分可能可以隨機，但一點頭緒都沒有QQ。</p><p><strong>pE</strong>：當下讀完題目覺得有點分治(?)，但還是完全沒想法。有 $12$ 分是區間DP，$6$ 分很水但沒有好好想，賽後才發現其實根本就簽到分啊QQ。</p></blockquote><p>pD 36 分最水，決定先拿掉，5 分鐘打好模板 + 寫完就丟上去了。</p><p><span class="lv3">00:18 pD 36</span></p><p>pC 23 分裸 FW，三層迴圈幹下去就拿得到了，但題目沒看清楚又吃了 2 次 WA，有夠智障。</p><p><span class="lv1">00:33 pC 0</span><br><span class="lv1">00:37 pC 0</span><br><span class="lv2">00:39 pC 23</span></p><p>去上個廁所，休息了大概 3 分鐘。</p><p>pA 36 分只要 $O(n^2)$ 暴力就可以了，但我不知道為什麼我寫了 17 分鐘，有夠久。</p><p><span class="lv1">00:59 pA 0</span></p><p>確定不是智障 bug 後，想了一下才發現 bug 跟我的實作方式有關，修一下之後就過了。</p><p><span class="lv3">01:06 pA 36</span></p><p>pB 7 分前綴和，10 分 $O(NQ)$，pE 18 分也頗水。但我對 pB 滿分滿有信心的，於是決定開始刻 pB，並利用子題當作分段 checker。</p><p>休息了 3 分鐘，推了一下式子確定線段樹沒問題後就開始寫。</p><p>先刻好 query 的部分，丟上去穩穩拿 7 分。</p><p><span class="lv2">01:42 pB 7</span></p><p>接下來是區間質量修改，假設增加質量為 $d$，則式子如下：</p><p>$$<br>\sum \frac{1}{2}(m_i + d)v_i^2 = \frac{1}{2} \sum (m_iv_i^2 + d v_i^2) = \frac{1}{2} (\sum m_iv_i^2 + d\sum v_i^2)<br>$$</p><p>所以多維護的 tag 有 $v_i^2, v_i$。</p><p>懶標 push 刻完之後丟上去結果 WA。</p><p><span class="lv2">02:00 pB 7</span></p><p>然後自己生了一些測資 + 檢查 code，但都沒找到 bug。</p><p>意識到這樣下去會燒雞，所以切換成撈分模式。先從 $NQ \leq 10^6$ 的 10 分開始撈。</p><p><span class="lv1">02:18 pB 0</span></p><p>發現加值的時候忘記取模，其實那筆 subtask 是 WA 但我看到一坨 TLE 擠在一起的時候以為模的常數太肥，所以我在加了 mod 之後又修了一下寫法降低模運算的次數。（後來發現我改了寫法速度根本沒差多少，改辛酸的）</p><p><span class="lv2">02:23 pB 10</span></p><p>跑去撈 pA 的 21 分，我想說只是抄 pB 的 code 過去修改一下，結果又不知道為什麼寫爛掉。又跳回去看 pB 的 code，又生了一些測資來 debug，但都沒有找到問題。</p><p>上個廁所回來，發現 modify 函式不太對勁。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">modM</span>(ql, qr, d, l, mid, cl);</span><br><span class="line"><span class="built_in">modM</span>(ql, qr, mid+<span class="number">1</span>, r, cr);</span><br></pre></td></tr></table></figure><p>右推函式<strong>少打一個參數</strong>，幹。</p><p>怎麼又是這種智障 bug。</p><p><span class="lv2">02:45 pB 20</span></p><p>結果 pA 還是爛的 QQ。</p><p><span class="lv1">02:45 pA 0</span></p><p>這時候想說 pB 修改既然都沒問題了，決定放掉 pA 也放掉 pE 的子題，專心拿滿分。</p><p>繼續推區間速度修改的式子，假設增加速度為 $d$，則式子如下：</p><p>$$<br>\sum \frac{1}{2}m_i(v_i + d)^2 = \frac{1}{2} \sum m_i(v_i^2 + 2dv_i + d^2) = \frac{1}{2} (\sum m_iv_i^2 + 2d\sum m_iv_i + d^2 \sum m_i)<br>$$</p><p>所以多維護的 tag 有 $m_iv_i, m_i$。</p><p>寫完丟上去，沒過。</p><p><span class="lv2">02:59 pB 20</span></p><p>比賽時間雖然到了，但我不論如何都想寫出來，所以就當作比賽延長繼續打。結果才發現有一條式子多乘了不該乘的東西。有夠智障。</p><p><span class="lv4">03:09 pB 100</span></p><p>AC 的當下真的好爽，但頭也好暈XD，休息一下後收一收東西就離開圖書館了。</p><blockquote><p><strong>Score: 195/500, Rk: 3</strong></p></blockquote><h1>賽後檢討</h1><p>這要是正式賽我一定會炸得很難看，沒寫 pE 真的是致命傷。</p><ol><li><span class="lv1">智障 bug：線段樹少打一個參數，多乘不該成的數字。</span></li><li>寫 code 的速度太慢。</li><li>pE 犯了 0 分的大忌，千萬不要對某題的滿分解太有自信而不撈其他題的分數。</li></ol><p>總體來說，先撈分的策略應該還不錯，至少對穩住心態很有幫助，以後就繼續維持這策略吧。</p>]]></content>
      
      
      
        <tags>
            
            <tag> competitive programming </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2021 建中校隊初選 Virtual</title>
      <link href="/2021/10/23/2021ckcon1/"/>
      <url>/2021/10/23/2021ckcon1/</url>
      
        <content type="html"><![CDATA[<style>.lv1 {    color: red;    font-weight: bold;}.lv2 {    color: #e89a13;    font-weight: bold;}.lv3 {    color: #bfad0b;    font-weight: bold;}.lv4 {    color: #27cf40;    font-weight: bold;}</style><h1>比賽資訊</h1><ul><li><strong>題目</strong>：<a href="https://tioj.ck.tp.edu.tw/contests/79">https://tioj.ck.tp.edu.tw/contests/79</a></li><li><strong>計分板</strong>：<a href="https://tioj.ck.tp.edu.tw/contests/79/dashboard">https://tioj.ck.tp.edu.tw/contests/79/dashboard</a></li><li><strong>題解</strong>：<a href="https://hackmd.io/@Dn7ABYK4QAyS02iuO5ydBw/Bk2_g_ozY#/">https://hackmd.io/@Dn7ABYK4QAyS02iuO5ydBw/Bk2_g_ozY#/</a></li></ul><span id="more"></span><h1>比賽結果</h1><h2 id="Subtasks-Gained">Subtasks Gained</h2><p><strong>pA</strong> <span class="lv4">70</span>／<span class="lv4">30</span></p><p><strong>pB</strong> <span class="lv4">15</span>／<span class="lv4">49</span>／<span class="lv4">36</span></p><p><strong>pC</strong> <span class="lv4">16</span>／<span class="lv4">17</span>／<span class="lv4">18</span>／<span class="lv4">49</span></p><p><strong>pD</strong> <span class="lv4">5</span>／<span class="lv4">8</span>／<span class="lv4">17</span>／<span class="lv4">21</span>／23／26</p><p><strong>pE</strong> 10／16／29／45</p><h2 id="Final-Score／Rank">Final Score／Rank</h2><img src="/2021/10/23/2021ckcon1/result.png" class><h1>比賽過程</h1><p>開場剛讀完 pA 馬上就開寫了，這次寫模板的速度有加快了。</p><p><span class="lv4">00:11 pA 100</span></p><p>接下來是燒雞的開始，繼續讀完剩下的題目。</p><p>pB 感覺有點 dp 但對狀態沒頭緒。</p><p>pC 以為每一次的移動不一定要是直線，可以任意轉彎，想說完了這題也太難，重看一次後才發現移動時要固定一個方向，總之就是 BFS 裸題，但每次移動有 8 種方向向量可以選。</p><p>pD 數論 + 賽局，一樣完全沒滿分想法，但看到子題切滿多的，感覺可以撈不少。</p><p>pE 不會，甚至連子題一的想法完全沒有 QwQ。</p><p><strong>00:25 Finished Reading</strong></p><p>不想先寫 pC 所以跑去想 pB，先往 dp 的方向想，但… 好像沒有重複子結構可以轉移，想了 15 分鐘就放棄了 dp 的想法。</p><p>然後注意到 $k \leq 3$ 感覺可以分 case 做事，於是一個一個解決。首先 $k = 1$ 很 trivial，直接填相反 bit 就好。</p><p>做 $k = 2$ 時對問題做了一下轉換，假設朋友的序列為 $f_i$ ，構造出的序列為 $b$，若 $b_j = 1$ 則將所有 $f_{i, j}$ 反轉，反之若 $b_j = 0$ 則不用。問題等價於構造出 $b$ 使得 $min_{i=1}^{k}(\sum_{j=1}^{n} f_{i, j})$ 最大。</p><p>這時候分開處理每個位置朋友的 bit 情況（有 $00, 01, 10, 11$ 共 4 種 mask），並處理該填 1 或 0。</p><p>$00, 11$ 是顯然的，而一對 $01, 10$ 可以互相抵銷，抵銷後看誰還有剩，令剩下的 mask 為 $m$，剩餘數量為 $c$，這時候就把 $\lfloor \frac{c}{2} \rfloor$ 個 $m$ 反轉，這樣會是最好的，滿直觀的 greedy 但我不會證。</p><p>想順著這個思路繼續推 $k = 3$ 的 case（有 8 種 mask，轉成十進位分別對應 $0 \sim 7$），本來想要把 $1, 2, 4$ 先全部反轉成 $6, 5, 3$，但不確定這樣 greedy 是不是對的，於是決定先寫掉 $k \leq 2$ 的子題。</p><p><span class="lv1">01:03 pB 0</span></p><p>變數不小心打反。</p><p><span class="lv3">01:07 pB 49</span></p><p>不放棄繼續推 $k = 3$，這時候發現剛剛的想法是好的，反正反轉不需要代價，需要的話再反反轉就好。一樣把 $3, 5, 6$ 互相抵銷後會剩至多兩個 mask，這時候問題回歸到 $k \leq 2$。</p><p>確定沒問題後就把剛剛的想法打成 code，想到什麼步驟就打什麼，所以 code 滿醜的，幸運的是沒有 bug 或假解。</p><p><span class="lv4">01:22 pB 100</span></p><p>上廁所回來 pD、pE 依舊沒想法，於是開始寫 pC。</p><p>注意到 $dis(s, t) = dis(s, m) + dis(m, t)$，所以兩次 BFS 就行了。寫了 15 分鐘後丟上去。</p><p><span class="lv1">01:43 pC 0</span></p><p>三小，Segmentation Fault ? _?</p><p>盯著 code 盯了很久，回去翻 verdict 才發現原來不是 RE 而是 MLE，但有些測資有過，所以不會是陣列開太大，但我還是很感性的把 int 改成 short。後續又改了一些小地方，想當然的全沒過。</p><p><span class="lv1">01:49 pC 0</span><br><span class="lv1">01:50 pC 0</span><br><span class="lv1">01:54 pC 0</span></p><p>這時候開始有點不耐煩，想說這種水題怎麼連一分都沒有，然後又隨便改了個東西，丟上去：</p><p><span class="lv2">01:56 pC 16</span></p><p>蛤，為什麼突然多了 16 分，而且有些測資變成了 TLE？</p><p>已經知道是 queue 塞太多東西炸掉了，但我明明有用 vis 陣列啊？？？</p><p>又重新檢查了 code，接著在推東西進 queue 的那一段 code 加上輸出 <code>vis[r][c]</code>，又在每回合輸出 queue。結果發現 vis 竟然沒被改到，這時候真的很困惑，開始越來越煩躁，我前一秒不是才剛寫 <code>vis[r][c] = true</code> 嗎，為什麼完全沒改變？？？？</p><p>直到我注意到我把 <code>=</code> 打成 <code>==</code>。</p><p>啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊我是智障啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊</p><p><span class="lv1">02:04 pC 0</span></p><p>三小又 TLE？？？</p><p>噢 debug 輸出忘記拔掉。</p><p><span class="lv4">02:07 pC 100</span></p><p>上了廁所，忘掉剛才的事。</p><p>pE 依舊沒任何想法，果斷放棄。</p><p>pD 嘗試推滿分解，中間一度以為可以轉換成兩堆 Nim 但顯然假解，而且沒注意到題目限制只能對較大數字操作。反正假解後大概又想了 5 分鐘，實在沒想法於是開始撈分。</p><p>5、8、17 分感覺就稍微寫些 if 就好，21 分可以 $O(xy)$ DP。</p><p><span class="lv2">02:26 pD 5</span></p><p>剛撈完 5 分就被抓去吃飯wwww。</p><p>為了阻止自己思考接下來的作法，我決定戳 pE 的官解邊吃飯邊讀。結果洗碗的時候還是不小心偷偷想了一下QQ。</p><p>回來 vir 的時候，決定先寫有完整想法的 21 分。</p><p><span class="lv2">02:45 pD 26</span></p><p>陸續把 8 分、17 分撈掉。</p><p><span class="lv3">02:52 pD 43</span><br><span class="lv3">02:55 pD 51</span></p><p>剩 5 分鐘沒做事，比賽結束。</p><blockquote><p><strong>Score: 351/500, Rk: 4</strong></p></blockquote><h1>賽後檢討</h1><ol><li>難度排錯，應該先寫 pC 再寫 pB。</li><li>沒注意到花了這麼多時間在 pB，竟然寫了一個小時，但我真的對這種題型很不熟悉，所以應該無解 QwQ。</li><li><span class="lv1">智障 bug：== 打成 =</span></li><li>debug 的時候不要做一些無謂的事，不只找不到 bug 還會產生「debug 那麼久還是找不到問題」的錯覺，<strong>事實上那不叫 debug，只是浪費時間</strong>。</li><li>debug 時忘記先 check <strong>常犯智障錯誤的 list</strong>，有 check 的話就不會浪費了 25 分鐘。</li><li>還以為 pE 要用什麼難度破表的大科技，結果想出關鍵步驟後竟然只需要二分搜，這題的思維「<strong>枚舉一個固定的東西</strong>」以前就見過但很不熟悉，結果這題沒看出來 QQ。</li><li>pD 只差在觀察出<strong>因數個數不會太多</strong>（<strong>大概 $n^{1/3}$ 個</strong>，但我真的不知道有那麼少 QQ），所以可以值域壓縮後做 DP，可惜。</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> competitive programming </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2021 附中暑期培訓模擬競賽 II</title>
      <link href="/2021/08/28/2021hsnumock2/"/>
      <url>/2021/08/28/2021hsnumock2/</url>
      
        <content type="html"><![CDATA[<style>.lv1 {    color: red;    font-weight: bold;}.lv2 {    color: #e89a13;    font-weight: bold;}.lv3 {    color: #bfad0b;    font-weight: bold;}.lv4 {    color: #27cf40;    font-weight: bold;}</style><span id="more"></span><h1>題目</h1><h2 id="pA-2">pA</h2><p><strong>機器鴨</strong><br>有兩個長度為 $n$ 的序列 $a, b$，有隻機器鴨會從原點依照這個序列移動，第 $i$ 個時刻，機器鴨會直線移動向量 $(a_i, b_i)$。</p><p>請重新排列序列 $a, b$，使得機器鴨能夠走回原點，並且移動過程中不會走到已經走過的點。無解輸出 $-1$。</p><p>$3 \leq n \leq 100$</p><p>$1 \leq |a_i|, |b_i| \leq 300$</p><p>$a_i \neq a_j$</p><p><strong>Subtask</strong></p><img src="/2021/08/28/2021hsnumock2/subtaska.png" class><h2 id="pB-2">pB</h2><p><strong>惡地之路</strong><br>$n$ 點 $m$ 邊帶權無向圖，每條邊有權重 $p_i$，定義從某點 $s$ 走到 $t$ 的票價為「路徑的權重和 $\times$ 經過的邊數」。</p><p>輸出從節點 $1$ 走到節點 $1 \sim n$ 的最小票價。</p><p>$1 \leq n \leq 2000$</p><p>$1 \leq m \leq 30000$</p><p>$1 \leq p_i \leq 10^6$</p><p><strong>Subtask</strong></p><img src="/2021/08/28/2021hsnumock2/subtaskb.png" class><h2 id="pC-2">pC</h2><p><strong>調色盤</strong><br>有一長度為 $n$ 的序列 $c$，並有一數字 $k$。</p><p>$q$ 筆詢問 $(l, r)$，求有多少數對 $(i, j)$，滿足 $l \leq c_i \leq c_j \leq r  \land |c_i| - |c_j| \leq k$。</p><p>$1 \leq n, k, q, c_i \leq 10^6$</p><p><strong>Subtask</strong></p><img src="/2021/08/28/2021hsnumock2/subtaskc.png" class><h2 id="pD-2">pD</h2><p><strong>告示牌</strong><br>$n$ 個字串 $s_1,…,s_n$ 要寫到一個告示牌上，一個字串必定只能出現在一行，不可斷開。</p><p>在不超過 $k$ 行的情況下，告示牌最少需要有多寬？</p><p>$1 \leq k, \sum_{i=1}^{n} |s_i| \leq 2 \times 10^5$</p><p><strong>Subtask</strong></p><img src="/2021/08/28/2021hsnumock2/subtaskd.png" class><h2 id="pE-2">pE</h2><p><strong>變色蠑螈</strong><br>一種魔法可用數對 $(a, b)$ 表示，代表可以將數字 $a$ 轉換成數字 $b$，或是反過來將 $b$ 轉換成 $a$。</p><p>現在有 $n$ 個要求，每個要求以 $(c, d)$ 表示，表示要將數字 $c$ 轉換成數字 $d$，請問最少需要學會幾種魔法才能達成上述要求。</p><p>$1 \leq n \leq 2 \times 10^5$</p><p>$1 \leq a, b, c, d \leq 10^9$</p><p><strong>Subtask</strong></p><img src="/2021/08/28/2021hsnumock2/subtaske.png" class><h1>比賽結果</h1><p><strong>Score：210／Rank：2nd</strong></p><img src="/2021/08/28/2021hsnumock2/result.png" class><h1>比賽過程</h1><p>賽前 5 分鐘還跑去拉肚子，有點雷。</p><p>開場時網路爛掉，pE 點「下載題本」一直沒反應，於是重複點了 20 幾次，最後受不了去看其他題，正要看的時候剛剛的按鈕突然全部有了反應，於是我又連續 20 幾次點了「取消下載」，有夠靠北。</p><p>一樣先讀題，15 分鐘。比較慘的是我 pA 跟 pE 沒讀仔細，漏了關鍵限制，所以難度排序一整個大亂。</p><p>當時的難度排序：<code>pA &lt; pD &lt; pB &lt; pC &lt; pE</code>，幾乎把正確順序整個倒過來。</p><p>pA 以為鴨子移動過程可視為瞬間移動，想說只要 $\sum a_i$ 跟 $\sum b_i$ 都 $=0$ 那隨便排列 $a, b$ 都有高機率是正確答案。但我忘記是直線前進所以經過的路徑也不能有交點。</p><p>不只讀錯題想法還一點都不嚴謹，有夠笨。反正就以為是簽到題就開始寫下去了。</p><p>結果過程中碰到很弔詭的 bug，題本疑似有不乾淨的字元，我直接複製到 code 底下再貼到 console 竟然沒辦法輸入，於是又重新檢查模板、主程式，又換了好幾次寫法，最後改成手動輸入才終於安分地吃進數字。莫名其妙地又浪費二十分鐘在解決看不見的 bug。</p><img src="/2021/08/28/2021hsnumock2/inputa.png" class><p>上面那個是爛掉的輸入，下面是好的，有夠奇怪。</p><p>丟上去結果吃了 WA（賽後覺得吃 WA 不意外）。</p><p><span class="lv1"><strong>00:40 pA 0分</strong></span></p><p>賽中沒發現是題目讀錯，又耍智障了 15 分鐘結果一分都沒有</p><p><span class="lv1"><strong>00:42 pA 0分</strong></span><br><span class="lv1"><strong>00:45 pA 0分</strong></span><br><span class="lv1"><strong>00:50 pA 0分</strong></span><br><span class="lv1"><strong>00:52 pA 0分</strong></span></p><p>前面發生的一堆意外、pA 一直燒，加上過了一個小時卻一分都沒有。這時心態基本上已經崩了，完全不想繼續寫下去。觸犯比賽的大忌。</p><p>上廁所回來，心情恢復一些但沒完全回復，這時選擇繼續想其他題目。</p><p>pB 最短路徑，感覺可以直接砸 dijkstra，但沒有想清楚這其實是假解。</p><p>pC 完全不會，區間問題是我的痛點，只有 $O(nq)$ 雙指針的想法。</p><p>pD 裸二分搜，有信心直接 AC。</p><p>pE 讀題目的時候有讀到一個魔法可以從 a 變成 b 也可以反過來（無向邊），但放到腦中思考的時候自動變成了有向邊，於是就卡住，完全沒注意到這是並查集水題QQ。</p><p>這時我覺得 pD 雖然比較簡單，但我實作 dijkstra 比較穩定，於是就先從 pB 開始寫。10 分鐘後寫完就丟上去了。</p><p><span class="lv3"><strong>01:11 pB 39分</strong></span></p><p>有點慶幸總算有分數了，但我預期的是滿分，百思不解又繼續盯著 code，然後開始很智障地改一些沒有用處的實作小細節。這樣一拖又浪費了 30 分鐘</p><p><span class="lv3"><strong>01:19 pB 39分</strong></span><br><span class="lv3"><strong>01:22 pB 39分</strong></span><br><span class="lv3"><strong>01:25 pB 39分</strong></span><br><span class="lv3"><strong>01:42 pB 39分</strong></span></p><p>心態又更糟了，甚至一度認為是測資的問題。上完廁所後才終於肯跳題。</p><p>pD 穩定地刻完二分搜就丟上去了，一發 AC。應該先寫這題來穩住心態的。</p><p><span class="lv4"><strong>01:57 pD 100分</strong></span></p><p>接下來開始撈分，首先是 pA，這時候我才注意到我看錯題目，被自己笨死。</p><p>讀了子題，前 25 分可以暴力 $O((n!)^2 \times n^2)$ 拿掉，28 分觀察到可以先對 $a$ 排序，前 $n-1$ 個向量所形成的軌跡會是一個下凸包，最後則回到原點。於是改了一下剛剛的 code，丟上去 28 分。</p><p><span class="lv2"><strong>02:05 pA 28分</strong></span></p><p>這時候想刻 25 暴力分，沒想到除了要重寫外還需要刻向量模板。但我完全沒注意到 pC 更好撈而且分數更多，眼裡就只有 pA。</p><p>悲慘的是，我寫爛了，連範測都沒過。</p><p>剩下半個小時才驚覺時間不夠，這時才跳去 pC。邊寫邊想實作細節，幸好沒有出問題。</p><p><span class="lv3"><strong>02:49 pC 37分</strong></span></p><p>3 分只要加個特判就行了，多加幾行 if 丟上去我就去撈 pE 了，沒有去注意有沒有拿到，結果竟然沒有。</p><p><span class="lv3"><strong>02:52 pC 37分</strong></span></p><p>pE 的 6 分只要把 pair 丟進 set 就行了。</p><p><span class="lv2"><strong>02:55 pE 6分</strong></span></p><p>再來有 4 分是只要分 case，但因為我沒注意到邊是雙向的所以就沒有拿到QQ。</p><p><span class="lv1"><strong>02:59 pE 0分</strong></span></p><h1>賽後檢討</h1><p>一樣先列出這場出狀況＆耍智障的地方。</p><ol><li>賽前拉肚子／開場網路爛掉／pA 輸入吃到奇怪字元。</li><li>pA 讀錯題目。</li><li>pB 單層 dijkstra 大假解，分層 dijkstra 可以拿 82 分，完整做法是 DP。對分層 dijkstra 還不是很熟，這是我的盲點。</li><li>pD 最簡單沒有先寫。</li><li>pE 思考的時候忘記是無向邊，整場被自己雷死。</li><li>糟糕的難度排序。</li><li>pC 的 3 分沒拿到，是因為我在拿 37 分的時候為了加快 judge 結果，特意加了這行： <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (n &gt; <span class="number">10000</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br></pre></td></tr></table></figure>結果忘記拔掉qwq。</li></ol><h1>總檢討</h1><h2 id="賽前">賽前</h2><ol><li>不要熬夜，11 點前就要上床。</li><li>可以寫些水題維持手感也穩住心態。</li><li>賽前一小時就要睡午覺，睡半小時起來才有時間讓腦袋暖機。</li><li>深呼吸告訴自己「我超電」、「我可以的」，但不是「我一定可以拿300分」。</li></ol><h2 id="策略修正">策略修正</h2><ol><li><p>開場<strong>讀題 15 分鐘</strong>，讀題時務必連<strong>子題配分</strong>都要讀過一遍。</p></li><li><p><strong>打模板的時間 5 分鐘</strong>，打的時候不要一直思考有什麼忘記打，浪費腦力，反正之後要用再補就好。</p></li><li><p>按照<strong>難度排序</strong>題目的技能要再加強。</p> <img src="/2021/08/28/2021hsnumock2/sortprob.png" class></li><li><p><strong>時間分配</strong>：</p><ul><li><strong>觀察性質 3 分鐘</strong></li><li><strong>思考解法 7 分鐘</strong></li><li><strong>總實作時間 20 分鐘</strong></li><li><strong>debug 10 分鐘</strong></li></ul><p>拿分間隔控制在 20 分鐘，最多不超過 30 分鐘。<br>停損點：思考 10 分鐘連 subtask 都沒想法就跳，<strong>卡了 40 分鐘</strong>一定要跳，不要一直想「&quot;應該&quot;還差一點就 AC 了」。</p></li><li><p><strong>觀察性質</strong>：</p><ul><li>注意變數範圍，誰特別大／特別小，作法 80% 跟它有關。</li><li>題目「保證」某種性質 $\rightarrow$，作法 99% 跟它有關。</li><li>常見手法：<ul><li>對 OOO 排序</li><li>數值丟到數線上</li><li>數對 (a, b) $\rightarrow$ 二維平面</li><li>區間問題：離線、雙指針、單調性</li></ul></li></ul></li><li><p><strong>思考解法</strong>：</p><ul><li>寫下範測，釐清題目。</li><li>可以構造複雜點的測資幫助思考。</li></ul><p>停損點：<strong>10 分鐘</strong>。</p></li><li><p><strong>實作</strong>：</p><ul><li>想到什麼 subtask 就寫什麼。</li><li>評估實作細節 2~3 分鐘。</li><li>分段 check 程式。</li></ul><p>停損點：<strong>20 分鐘</strong>。</p></li><li><p><strong>debug</strong> 時，先用 1 分鐘檢查有沒有智障 bug。</p><ul><li><span class="lv1">沒開 long long</span></li><li><span class="lv1">陣列戳出界</span></li><li><span class="lv1">寫好的函式忘記呼叫</span></li><li><span class="lv1">0-base／1-base</span></li><li><span class="lv1">忘記初始化</span></li><li><span class="lv1">==打成=</span></li></ul><p>構造測資，可以試試邊界測資，不要一直盯著 code。<br>有可能假解只是自己沒發現。<br>停損點：<strong>10 分鐘</strong>。</p></li></ol><h2 id="賽中心態調整">賽中心態調整</h2><ol><li>把比賽想成是跟出題者決鬥，AC 了代表運氣好決鬥獲勝，WA 了也只代表沒有打贏出題者，滿正常的事，絕對不要認為是因為自己實作爛實力爛，換一題跟他打就好。</li><li>不要急著想拿滿分，大部分的 AC 都是一點一點分數累積上去的，就算想到滿分解也是一樣。</li><li>丟一筆 submission 就去廁所，過半場吃點心。</li><li>換題的時候，一切重新 reset，剛剛發生了什麼事都不重要，不要掛在心上。</li><li>你炸掉大家也都會炸掉。</li></ol><h1>實用文章</h1><ol><li><p><a href="https://hackmd.io/Cd5AugwvQlmhrH-97O1PVw">IOI 前國手 張程凱 - IOI 準備心得</a></p></li><li><p><a href="https://slides.com/emanlaicepsa/toi/?fbclid=IwAR1XBQiTBGzPdiCh8SiAdMepXzlqBNE7Na9P0kULFkqE05wUovc7PwvCFuc">IOI 前國手 曹宸睿 - TOI 入營考訓練</a></p></li><li><p><a href="https://www.facebook.com/permalink.php?story_fbid=873924860066850&amp;id=100023480331778">TOI 一階電神 林柏瑄 - 2021 TOI 心得文</a></p></li><li><p>電神們的建議</p></li></ol><img src="/2021/08/28/2021hsnumock2/s1.png" class><img src="/2021/08/28/2021hsnumock2/s2.png" class><img src="/2021/08/28/2021hsnumock2/s3.png" class>]]></content>
      
      
      
        <tags>
            
            <tag> competitive programming </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2021 附中暑期培訓模擬競賽 I</title>
      <link href="/2021/08/26/2021hsnumock1/"/>
      <url>/2021/08/26/2021hsnumock1/</url>
      
        <content type="html"><![CDATA[<style>.lv1 {    color: red;    font-weight: bold;}.lv2 {    color: #e89a13;    font-weight: bold;}.lv3 {    color: #bfad0b;    font-weight: bold;}.lv4 {    color: #27cf40;    font-weight: bold;}</style><span id="more"></span><h1>題目</h1><h2 id="pA">pA</h2><p><strong>直播循環</strong><br>一個直播循環是由 $s$ 天的直播時段和 $r$ 天的休息時間構成。<br>現有位直播主要進行 $n$ 個遊戲的直播，第 $i$ 個遊戲需在某個循環的第 $a_i$ 天遊玩。且每個遊戲直播之間須間隔至少 $r$ 天的休息日。<br>求最少需幾個直播循環才能至少玩過所有遊戲一遍，並輸出每個遊戲須在第幾個循環進行直播（輸入任一種安排方式）。</p><p>$n \leq 2 \times 10^5$</p><p>$0 \leq r \leq s \leq 10^9$</p><p><strong>Subtask</strong></p><img src="/2021/08/26/2021hsnumock1/subtaska.png" class><h2 id="pB">pB</h2><p><strong>兔田彩券</strong><br>給定 $m$ 個數對 $(a_i, b_i), a_i \neq b_i$，每個數對的數字皆 $\leq n$。<br>接著有 $q$ 筆詢問，每筆詢問給定 $(l, r, s, t)$，求有多少數對 $(a_i, b_i)$ 滿足 $(l \leq a_i \leq r \land s \leq b_i \leq t)$ 或 $(l \leq b_i \leq r \land s \leq a_i \leq t)$。</p><p>$1 \leq n \leq 2000$</p><p>$1 \leq m, q \leq 2 \times 10^5$</p><p><strong>Subtask</strong></p><img src="/2021/08/26/2021hsnumock1/subtaskb.png" class><h2 id="pC">pC</h2><p><strong>魔法師測驗</strong><br>有一棵 $n$ 個節點的樹，每個節點有權重 $a_i$，求最長的路徑滿足路徑上的節點權重 $gcd \neq 1$，輸出該路徑的節點數。</p><p>$1 \leq n, a_i\leq 2 \times 10^5$</p><p><strong>Subtask</strong></p><img src="/2021/08/26/2021hsnumock1/subtaskc.png" class><h2 id="pD">pD</h2><p><strong>刷怪塔</strong><br>有 $T$ 筆測資，每筆測資有兩個數字 $a, b$。</p><p>令 $s$ 初始為 $1$，定義一次操作如下：</p><ol><li>選擇 $a, b$ 數字較大者（若相同則選擇 $a$），並將該數字減去 $s$。</li><li>將 $s$ 的值增加 $1$。</li></ol><p>重複操作直到 $a, b$ 皆 $\leq s$。</p><p>輸出總操作次數。</p><p>$1 \leq T \leq 10^5$</p><p>$0 \leq a, b \leq 10^{18}$</p><p><strong>Subtask</strong></p><img src="/2021/08/26/2021hsnumock1/subtaskd.png" class><h2 id="pE">pE</h2><p><strong>時空旅人之爭</strong><br>有一棵 $n$ 個節點的樹，自第 $0$ 秒開始，複製人便佔領節點 $1$，並且每隔 $2$ 秒往相鄰節點擴散。</p><p>接著有 $q$ 筆詢問 $(s, t)$，代表從節點 $s$ 開始經過最短路徑到達 $t$。時間從 $0$ 秒開始計算，每前往下一個節點需要 $1$ 秒。求這段路程中有多少節點已經被複製人佔領。</p><p>$1 \leq n, q \leq 2 \times 10^5$</p><p><strong>Subtask</strong></p><img src="/2021/08/26/2021hsnumock1/subtaske.png" class><h1>比賽結果</h1><p><strong>Score：135／Rank：3rd</strong></p><img src="/2021/08/26/2021hsnumock1/result.png" class><h1>比賽過程</h1><p>開賽先下載所有題本，大概先花了15分鐘閱讀題本。</p><p>當時的難度排序：<code>pA &lt; pE &lt; pC &lt; pD &lt; pB</code></p><p>pA 在紙上畫了一些圖後，馬上就想到 greedy+STL 就好了。</p><p>感覺這是最簡單的題目，沒什麼猶豫就寫下去了，刻模板 10 分鐘，但寫到後面才發現完了，我連 STL 的操作都不太熟悉，於是把 multiset 砍掉換成 map 才終於刻完。丟上去一發 AC。</p><p><span class="lv4"><strong>00:35 pA 100分</strong></span></p><p>接下來輪流想其他題目的作法。</p><p>pE 也是畫圖出來之後，很快想到 LCA+倍增二分搜，加上最近剛好有補到 LCA，所以我對實作滿有信心的，這題於是被我排在前面。</p><p>pC 感覺樹 DP，有觀察到每個數字的質因數不多，可是還是沒有複雜度好的想法，只有想到枚舉每個 $\leq 2\times 10^5$ 的質因數後套樹直徑。</p><p>pD 二分搜，但還要分一堆 case，非常麻煩，感覺寫下去了就會炸掉。</p><p>pB 有注意到 $n$ 特別小，除此之外沒任何想法，感覺是要寫線段樹或是莫隊，我對這種區間問題真的完全沒轍QQ。但是有 15 分是很水的暴力分，寫完 5 分鐘就丟上去了。</p><p><span class="lv2"><strong>01:04 pB 15分</strong></span></p><p>pD 的 20 分也很好水，先拿了簡單二分搜的 8 分，再拿暴力 12 分。</p><p>這裡比較雷的點是，明明 8 分的二分搜很好寫（大概兩分鐘就可以寫完），但我心態上一直覺得二分搜才 8 分感覺沒什麼價值，莫名地一直猶豫到底要不要寫，或是去想正解，拖一拖結果拖了 15 分鐘才拿掉。我到底在想什麼啊wwwwwwwwww</p><p><span class="lv2"><strong>01:27 pD 20分</strong></span></p><p>這時已經過半場，pC 樹 DP 依舊只有那個暴力的想法，這題子題切得很細但我完全沒有認真讀，很主觀地認為這個做法頂多 10~20 分，加上對於 pE 的滿分解太過自信，也沒想著要撈分就直接刻下去了。</p><p>LCA 的部分很順，5 分鐘就搞定，但最後的倍增二分搜沒有想清楚就直接寫，導致碰到一大堆 bug，碰一個 bug 就多加幾行特判處理，搞到最後 code 長得很肥。</p><p>好不容易範測過了，丟上去，結果</p><p><span class="lv1"><strong>02:01 pE 0分</strong></span></p><p>心中默念一聲幹之後回去好好看子題，結果我連一條鍊的測資都沒過。於是隨便生了一個鍊的測資，結果又找到更多問題，但我沒有打算重寫，反而是在那複雜的 code 上面又多加了更多的 if。看似解決了又丟上去。</p><p><span class="lv1"><strong>02:16 pE 0分</strong></span></p><p>糟糕，心態越來越不對，已經砸了 50 分鐘在這題了但我沒有收手，給自己停損點但都是給假的。一直很懊惱很不捨，寫了那麼長的 code 但一分也沒有，抱著「<strong>只要再修一下可能就可以 AC 了，現在放棄的話前面那一個小時就全都白費</strong>」這種斷不開的糟糕想法一直燒到比賽剩 20 分鐘。</p><p><span class="lv1"><strong>02:27 pE 0分</strong></span><br><span class="lv1"><strong>02:37 pE 0分</strong></span></p><p>這時候頭已經很脹痛，腦中思緒全部打結，心態上又一直很自責、懊悔，暴躁到敲了幾下鍵盤後去上廁所，但心情還沒完全平復就又回到電腦桌前。</p><p>這時候才開始寫 pC 的暴力分，順便加個唬爛剪枝（按照質因數出現的次數排序做樹直徑）。質數篩 + 質因數分解 + 樹直徑 DP 刻完大概剩 5 分鐘，結果測了範測，完了，是爛的。最後就盯著 code 盯到結束前 30 秒，很情感地把 code 丟了上去，想當然的一分都沒有。</p><p><span class="lv1"><strong>02:59 pC 0分</strong></span></p><h1>賽後檢討</h1><p>耍智障的地方真的太多了 = =&quot;</p><ol><li>pA 居然刻到後面才發現不能用 multiset 而要用 map。</li><li>pB 耍笨，套到二維平面上才發現只需要二維前綴和就行了，但我所有的思考過程全都在一維直線上，沒跳脫出來。</li><li>pC 有兩個智障 bug。<ul><li>我所有的 code 都是 1-based 的，但輸入數字的時候卻從 index 0 開始輸入。</li><li>樹 DP 有一段 code</li></ul> <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (tag[u] == <span class="number">0</span>) &#123;</span><br><span class="line">    dp[u] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>關鍵在於不能馬上 return 而是要繼續 dfs，真是智障。</li><li>pE 爛在倍增二分搜，結果只是我沒有注意到我的寫法會讓指針跳到 LCA 上面。</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> competitive programming </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>電資圈接力文—隨機大法好</title>
      <link href="/2021/07/01/random/"/>
      <url>/2021/07/01/random/</url>
      
        <content type="html"><![CDATA[<style>.red {  color: #c2081a;}</style><h1>前言</h1><p>本來想寫連通分量跟 tarjan 的介紹，但我發現可能會寫得又臭又長，加上我不會畫畫，於是就決定來介紹更酷的東西。</p><span id="more"></span><p>第一篇教學文 :D<br>廢話不多說，直接進入正文</p><br><h1>先備知識 — 如何產生亂數</h1><p><strong>懶人包：已經會的話可以直接跳過這一部分。</strong></p><blockquote><p>參考資料：<a href="https://blog.gtwang.org/programming/cpp-random-number-generator-and-probability-distribution-tutorial/">https://blog.gtwang.org/programming/cpp-random-number-generator-and-probability-distribution-tutorial/</a></p></blockquote><p>要有一個可以產生亂數的工具，首先必須備齊三大工具：</p><h2 id="1-亂數種子（Random-Seed）">1. 亂數種子（Random Seed）</h2><details>  <summary>點我</summary><p>亂數的生成幾乎都是用一些複雜的數學公式（偽隨機），而種子的功能就是做為這些公式的某些<strong>初始參數</strong>。</p><p>常用的種子是時間資訊，取用方法有 <code>time(NULL)</code> 或是 <code>chrono::steady_clock::now().time_since_epoch().count()</code>。</p><p>另外也可以用 <code>std::random_device</code>，這東西會抓系統的一些隨機資訊來產生亂數，詳細介紹可以看上面那篇參考資料。</p></details><h2 id="2-引擎（Generator）">2. 引擎（Generator）</h2><details>  <summary>點我</summary><p>隨機算法的核心，把種子餵給他後，就可以幫你產生一連串的亂數。</p><p>個人最常用的是 <code>std::mt19937</code>，背後的演算法是<a href="https://zh.wikipedia.org/wiki/%E6%A2%85%E6%A3%AE%E6%97%8B%E8%BD%AC%E7%AE%97%E6%B3%95">梅森旋轉演算法</a>。</p><p>宣告一個引擎的語法：<code>引擎 名稱(種子);</code><br>例如：<code>std::mt19937 gen( time(NULL) );</code></p><p>其他引擎可以參考上面那篇文。</p></details><h2 id="3-數值分布（Distribution）">3. 數值分布（Distribution）</h2><details>  <summary>點我</summary><p>分布的功能就是將引擎產生的數值，依照我們的需求轉換為各種機率分布，例如均勻分布、常態分布、二項分布等等。</p><p>基本上如果沒有特別的需求，使用 <code>uniform distribution</code> （均勻分布）就夠了。</p><p>如果是使用整數，語法是 <code>std::uniform_int_distribution&lt;int&gt; 分布名稱(最小值, 最大值)</code>。<br>如果是使用小數，語法是 <code>std::uniform_real_distribution&lt;double&gt; 分布名稱(最小值, 最大值)</code>。</p><p>舉例：<code>std::uniform_int_distribution&lt;int&gt; dis(0, 100);</code><br>而產生一個亂數的語法：<code>分布(引擎)</code></p><p>其他數值分布可以參考上面的文章。</p></details><details>  <summary>以下示範如何隨機產生 100 個介於 0~10000 的整數：</summary>  <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;chrono&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;random&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">mt19937 <span class="title">gen</span><span class="params">(chrono::steady_clock::now().time_since_epoch().count())</span></span>;</span><br><span class="line">    <span class="function">uniform_int_distribution&lt;<span class="type">int</span>&gt; <span class="title">dis</span><span class="params">(<span class="number">0</span>, <span class="number">10000</span>)</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="built_in">dis</span>(gen) &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><br><h1>暖身：大數運算</h1><blockquote><p><strong>題目來源：改編自 2020 資訊之芽團體賽</strong></p><p>給一個正整數 $N$，令 $M = N \ \text{mod}\ 987654321$，請計算 $M^N \ \text{mod}\ 2$ 的結果。</p><p>$N \leq 10^{10^5}$，測試資料共 $\lfloor{\pi}\rfloor$ 筆。</p></blockquote><p>完蛋，看起來好難喔，怎麼辦 QQ？</p><p>別忘了，解一道題目最重要的步驟便是好好觀察題目的性質。</p><p>注意到 $\lfloor{\pi}\rfloor = 3$，並且答案只有 $0$ 跟 $1$ 兩種。</p><p>因此我們可以不管 $N$，直接隨機決定要輸出 $0$ 還是 $1$ 就好。</p><p>這個做法的 AC 機率 $= (\frac{1}{2})^3 = \frac{1}{8}$。期望上只要丟 8 次就會過了，夠有緣的甚至一發爽爽 AC。</p><blockquote><p><strong>類題練習</strong></p><p>延續例題，只是測試資料從 $\lfloor{\pi}\rfloor$ 筆變成 $\lfloor{\text{🥧}}\rfloor$ 筆。</p><details>  <summary>提示一</summary>  🥧 = pie</details><details>  <summary>提示二</summary>pie = $\pi e$</details><details>  <summary>作法</summary>$\lfloor{\text{🥧}}\rfloor = 8$，和例題的作法一樣，有 $\frac{1}{256}$ 的機率可以 AC，期望只要丟 256 次就行了。</details></blockquote><br><h1>不那麼隨機的隨機</h1><blockquote><p><strong>先備知識：前綴和</strong></p></blockquote><details>  <summary>先看簡單版的題目：</summary><blockquote><p>輸入一個長度為 $N$ 的陣列 $A$，接下來有 $Q$ 筆詢問。</p><p>第 $i$ 筆詢問有兩個數字 $L_i, R_i$，問<strong>每種數字</strong>在區間 $A[L_i] \sim A[R_i]$ 出現次數是否恰好為 $3$ 的倍數？</p><p>對於每筆詢問，輸出一行 YES 或 NO。</p><p>$N \leq 10^5, Q = 3,$ 測資只有一筆。</p><p>$1 \leq A_i \leq N$</p></blockquote><p>首先先盯著這個問題，然後會發現一個關鍵的性質 — $Q = 3$，且答案只有兩種。類似剛才所學到的作法，枚舉這三筆詢問要輸出的是 YES 或 NO，  最多只要丟 8 次就會過了。不要跟我說什麼 O(NQ) 暴力統計出現次數就可以解決我不聽我不聽我不聽</p></details><p>接著是加強版：</p><blockquote><p>輸入一個長度為 $N$ 的陣列 $A$，接下來有 $Q$ 筆詢問。</p><p>第 $i$ 筆詢問有兩個數字 $L_i, R_i$，問<strong>每種數字</strong>在區間 $A[L_i] \sim A[R_i]$ 出現次數是否恰好為 $3$ 的倍數？</p><p>對於每筆詢問，輸出一行 YES 或 NO。</p><p>$N \leq 10^5, Q \leq 10^5$</p><p>$1 \leq A_i \leq N$</p></blockquote><p>有個很聰明的作法，用文字不太好形容，直接舉例子。</p><p>假設陣列是 $[1, 2, 1, 1, 2, 1, 2, 2]$。</p><p>讓 $1$ 映射到任意數字 $x$，$2$ 映射到任意數字 $y$。</p><p>定義陣列 $B$ 如下：</p><table><thead><tr><th style="text-align:center">陣列$A$</th><th style="text-align:center">1</th><th style="text-align:center">2</th><th style="text-align:center">1</th><th style="text-align:center">1</th><th style="text-align:center">2</th><th style="text-align:center">1</th><th style="text-align:center">2</th><th style="text-align:center">2</th></tr></thead><tbody><tr><td style="text-align:center">陣列$B$</td><td style="text-align:center">$x$</td><td style="text-align:center">$y$</td><td style="text-align:center">$x$</td><td style="text-align:center">$-2x$</td><td style="text-align:center">$y$</td><td style="text-align:center">$x$</td><td style="text-align:center">$-2y$</td><td style="text-align:center">$y$</td></tr></tbody></table><p><strong>概念就是，若數字為 $a$，其對應到的數字為 $m_a$，若該數字由左往右出現第 「$3$ 的倍數」次，則它在 $B$ 陣列中的值就要被設為 $-2 m_a$，反之則設為 $m_a$。</strong></p><p>有了 $B$ 陣列，該如何判斷答案呢？</p><p>詢問的時候，若每種數字在區間 $[L_i, R_i]$ 出現次數皆為 3 的倍數，</p><details>  <summary>則代表</summary><p>$B[L_i] + B[L_i + 1] + … + B[R_i] = 0$</p></details><p>這時就輸出 YES，否則輸出 NO。</p><p>而只要套用<strong>前綴和</strong>的技巧，$O(1)$ 回答 $B[L_i] + … + B[R_i]$，就可在 $O(N + Q)$ 的時間內解決這題。</p><p>然而這作法還是有問題，因為 $B[L_i] + … + B[R_i] = 0$ 的時候答案不一定是 YES。</p><details>  <summary>舉例</summary><blockquote><table><thead><tr><th style="text-align:center">陣列$A$</th><th style="text-align:center">1</th><th style="text-align:center">1</th><th style="text-align:center">1</th><th style="text-align:center">2</th></tr></thead><tbody><tr><td style="text-align:center">陣列$B$</td><td style="text-align:center">$x$</td><td style="text-align:center">$x$</td><td style="text-align:center">$-2x$</td><td style="text-align:center">$y$</td></tr></tbody></table><p>讓 $x = 1, y = 2$，詢問 $[3, 4]$ 便會判斷錯誤。</p></blockquote></details><p>問題在於 $A$ 中每個數字的映射範圍不能太小，否則很容易就會發生判斷錯誤的情況。</p><p>這時只要保證 $A$ 的每個數字隨機映射到的數字夠大、夠分散，例如隨機映射到 $[1, 10^9]$ 之間的數字，就有很高的機率能夠避開判斷失誤，穩穩 AC。</p><blockquote><p><strong>類題練習</strong></p><p>題目：<a href="https://neoj.sprout.tw/problem/793/">資芽 OJ 793 — 想不到題目標題QQ</a></p></blockquote><br><h1>我不會下標題，但這真的很有趣</h1><blockquote><p><strong>先備知識：二分搜</strong></p></blockquote><blockquote><p><strong>經典例題：<a href="https://neoj.sprout.tw/problem/794/">資芽 OJ 794 — 區間絕對眾數</a></strong></p><p>若某個數字 $x$ 在一個序列中出現次數 <strong>嚴格超過</strong> 序列長度的一半，稱 $x$ 為該序列的絕對眾數。</p><p>輸入一個長度為 $N$ 的正整數序列 $a_1, …, a_N$，接下來有 $Q$ 筆詢問。</p><p>每筆詢問輸入 $l_i, r_i$，輸出區間 $[l_i, r_i]$ 的絕對眾數，若不存在請輸出 $0$。</p><p>$N, Q \leq 5 \times 10^5, 1 \leq a_i \leq 5 \times 10^5$</p></blockquote><details>  <summary>提示</summary>  如果我在一個區間隨機戳一個數字的話...</details><details>  <summary>溫馨提醒</summary>  建議直接點開以下提示，因為我本人想了一年多才在偶然獲得的提示下想到這題的關鍵。<p><strong>對，整整一年。</strong></p></details><details>  <summary>破題關鍵</summary>  如果我在一個區間隨機戳一個數字的話，那我戳中絕對眾數的機率會是 $\frac{1}{2}$。</details><details>  <summary>完整做法</summary><p>那我們不妨在這個區間內隨機選 $30$ 個數字，然後一一檢查它們是不是絕對眾數，而連續 $30$ 次都戳不中絕對眾數的機率略小於 $10^{-9}$，基本上可以忽略這微小的機率，假裝一定會戳中。</p><p>因此單筆詢問的正確率為 $1 - 10^{-9}$，連續 $Q$ 筆詢問都正確的機率為 $(1 - 10^{-9})^Q$，若 $Q = 5 \times 10^5$，則 AC 的機率約為 $99.95%$，幾乎可以一發 AC，一次不過第二次也會過。<strong>如果有人可以連續兩次都 WA 的，請截圖 + 傳 code 私訊我，請你吃三碗拉麵</strong>。</p><p>現在還有一個問題要解決：要怎麼快速知道一個數字在某個區間內是不是絕對眾數？或者，要怎麼快速知道一個數字在某個區間內<strong>出現幾次</strong>？</p><p>有個比較直覺的作法，先開一個大小 $5 \times 10^5$ 的 vector 陣列 $pos$，$pos[a]$ 存 $a$ 這個數字在原序列中依序出現的位置。</p><blockquote><p><strong>舉例如下：</strong></p><table><thead><tr><th style="text-align:center">$i$</th><th style="text-align:center">1</th><th style="text-align:center">2</th><th style="text-align:center">3</th><th style="text-align:center">4</th><th style="text-align:center">5</th><th style="text-align:center">6</th></tr></thead><tbody><tr><td style="text-align:center">$a_i$</td><td style="text-align:center">1</td><td style="text-align:center">2</td><td style="text-align:center">1</td><td style="text-align:center">1</td><td style="text-align:center">2</td><td style="text-align:center">2</td></tr></tbody></table><p><strong>則 pos 陣列如下：</strong></p><table><thead><tr><th style="text-align:center">$a$</th><th style="text-align:left">$pos[a]$</th></tr></thead><tbody><tr><td style="text-align:center">1</td><td style="text-align:left">1, 3, 4</td></tr><tr><td style="text-align:center">2</td><td style="text-align:left">2, 5, 6</td></tr></tbody></table></blockquote><p>要詢問一個數字 $a$ 的在區間 $[l, r]$ 的出現次數，可以換個角度，改成詢問 <strong>$pos[a]$ 中有幾個數字介於 $l \sim r$ 之間</strong>。</p><p>由於 $pos[a]$ 嚴格遞增，因此對 $pos[a]$ 做二分搜，搜尋 <strong>「第一個大於等於 $l$ 的數字」的位置</strong>，以及 <strong>「第一個大於 $r$ 的數字」的位置</strong>。兩個搜到的答案相減，就是 $a$ 在該區間出現的次數。</p><blockquote><p><strong>舉例如下：</strong></p><p><strong>沿用上例的 pos 陣列，假設詢問 1 在區間 $[2, 5]$ 出現幾次，</strong></p><p><strong>則可以反過來問 $pos[1]$ 中，有幾個數字介於 $2 \sim 5$ 之間。而符合條件的數字以紅色標示：</strong></p><table><thead><tr><th style="text-align:center">$a$</th><th style="text-align:left">$pos[a]$</th></tr></thead><tbody><tr><td style="text-align:center"><strong>1</strong></td><td style="text-align:left"><strong>1, <span class="red">3, 4</span></strong></td></tr><tr><td style="text-align:center">2</td><td style="text-align:left">2, 5, 6</td></tr></tbody></table><p><strong>這件事情可以用二分搜做到。</strong></p><p><strong>懶的寫二分搜的話可以用 lower_bound 函式，我是怪人我每次二分搜都還是會自己刻。</strong></p></blockquote></details><p>這個做法的總複雜度為 $O(N + k \ Q \log N)$，$k$ 是每次詢問挑的數字個數（上面的作法 $k = 30$）。</p><p>如果會 TLE 的話可以把 $k$ 改小一點，會 WA 的話就改大一點。</p><details>  <summary>另解</summary><p>這題還有另外一個非隨機做法，不僅速度更快（經實測時間是隨機的一半），而且正確率 $100 %$，有興趣的可以上網搜尋「<strong>戰鬥線段樹</strong>」，也是一個超酷的作法。</p><p>或是參考台中一中 x 資奧二階大佬 <strong>abc864197532</strong> 的文章：<br><a href="https://abc864197532.github.io/2021/02/07/tioj-2140/">https://abc864197532.github.io/2021/02/07/tioj-2140/</a></p></details>]]></content>
      
      
      
        <tags>
            
            <tag> competitive programming </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
